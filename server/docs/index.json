[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "modules/.external-ecmascript.js",
    "static": true,
    "longname": "modules/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "modules/api/blockchain-API.js",
    "content": "const express = require('express');\nconst crypto =  require('crypto');\nconst serverless = require('aws-serverless-express');\nconst AWS = require('aws-sdk');\n\n//Configure AWS\nAWS.config.update({ region: 'eu-west-2' });\n\n//Initiate server\nconst dynamoDB = new AWS.DynamoDB.DocumentClient();\nconst app = express();\n\napp.use(express.json());\n\n//Rehash route\napp.post('/rehash', (req, res) => {\n    const hash = req.body.hash;\n    const user = req.body.user;\n\n    rehash(hash, user, res);\n});\n\n\n//Rehash data\nfunction rehash(hash, user, res) {\n    try {\n        //Prepare data\n        const originalHash = hash;\n        const timestamp = Date.now();   //Generate a timestamp\n        const nonce = crypto.randomBytes(16).toString('hex');\n        const dataToHash = originalHash + user + timestamp + nonce;  //Concatenate original hash, timestamp, etc.\n        const rehashedValue = crypto.createHash('sha256').update(dataToHash).digest('hex');  //Hash the concatenated data\n\n        //Insert data into DynamoDB\n        const params = {\n            TableName: 'blockchainHash',\n            Item: {\n                user,\n                timestamp,\n                originalHash,\n                hash: rehashedValue,\n                nonce\n            },\n        };\n\n        //Error handler\n        if(user != '' && originalHash != '') {\n            dynamoDB.put(params, (error) => {\n                if (error) {\n                    console.error('DynamoDB Error:', error.message);\n                    res.status(500).json({ error: 'DB Conncetion Error' });\n                } else {\n                    res.status(200).json({ rehashedValue });\n                }\n            });\n        } else {\n            console.error('No enouth data!');\n            res.status(500).json({ error: 'Not enougth data!' });\n        }\n    } catch (error) {\n        console.error('Error:', error.message);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n}\n\n//Create server\nconst server = serverless.createServer(app);\n\nexports.handler = (event, context) => serverless.proxy(server, event, context); //Define the AWS Lambda handler function\n",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/api/blockchain-API.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "express",
    "memberof": "modules/api/blockchain-API.js",
    "static": true,
    "longname": "modules/api/blockchain-API.js~express",
    "access": "public",
    "export": false,
    "importPath": "server/modules/api/blockchain-API.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "crypto",
    "memberof": "modules/api/blockchain-API.js",
    "static": true,
    "longname": "modules/api/blockchain-API.js~crypto",
    "access": "public",
    "export": false,
    "importPath": "server/modules/api/blockchain-API.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "serverless",
    "memberof": "modules/api/blockchain-API.js",
    "static": true,
    "longname": "modules/api/blockchain-API.js~serverless",
    "access": "public",
    "export": false,
    "importPath": "server/modules/api/blockchain-API.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "AWS",
    "memberof": "modules/api/blockchain-API.js",
    "static": true,
    "longname": "modules/api/blockchain-API.js~AWS",
    "access": "public",
    "export": false,
    "importPath": "server/modules/api/blockchain-API.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "dynamoDB",
    "memberof": "modules/api/blockchain-API.js",
    "static": true,
    "longname": "modules/api/blockchain-API.js~dynamoDB",
    "access": "public",
    "export": false,
    "importPath": "server/modules/api/blockchain-API.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "app",
    "memberof": "modules/api/blockchain-API.js",
    "static": true,
    "longname": "modules/api/blockchain-API.js~app",
    "access": "public",
    "export": false,
    "importPath": "server/modules/api/blockchain-API.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "rehash",
    "memberof": "modules/api/blockchain-API.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/api/blockchain-API.js~rehash",
    "access": "public",
    "export": false,
    "importPath": "server/modules/api/blockchain-API.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "user",
        "types": [
          "*"
        ]
      },
      {
        "name": "res",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "server",
    "memberof": "modules/api/blockchain-API.js",
    "static": true,
    "longname": "modules/api/blockchain-API.js~server",
    "access": "public",
    "export": false,
    "importPath": "server/modules/api/blockchain-API.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "modules/aws_services.js",
    "content": "import AWS from 'aws-sdk';\nimport fs from 'fs';\nimport https from 'https';\nimport { readJSONFile, extractTimestamp } from \"./utility.js\";\nimport { exec } from 'child_process';\nimport { FILE_PATHS, EXPERIENCE_CONFIG } from \"./server_settings.js\";\n\n//Configure AWS region\nAWS.config.update({ region: 'eu-west-2' });\n\n//Initiate AWS components\nconst transcribeService = new AWS.TranscribeService(); //Init AWS Transcriber\nconst S3 = new AWS.S3();                               //Init AWS S3 Bucket\nconst comprehend = new AWS.Comprehend();               //Init AWS Comprehend\n\n\n//Insert audio file to the AWS S3 Bucket \nfunction sendAudioToAWSS3(audioFile) {\n    let filePath = FILE_PATHS.ROW_AUDIO_FOLDER_PATH + audioFile,\n        convertedFilePath = FILE_PATHS.CONVERTED_AUDIO + audioFile;\n\n    concatinateWavFiles(filePath, () => {\n        //Configure the AWS bucket\n        const bucketName = 'audiobucketfortranscirber';\n\n        fs.readFile(convertedFilePath, (err, data) => {\n            if (err) console.log('File reading error: ', err)\n\n            //Upload the audio file to the AWS S3 bucket\n            S3.upload({\n                Bucket: bucketName,\n                Key: audioFile,\n                Body: data\n            }, (error, result) => {\n                if (error) console.log('Error uploading the audio file to the bucket:', error);\n                else transcribeTheAudioFile(audioFile); //Run the Transcriber job\n            })\n        });\n    });  \n}\n\n//Create and run the Transcriber job on the AWS Transcriber service\nfunction transcribeTheAudioFile(audioFile) {\n    let transcriptionJobName = \"audioT_\" + audioFile.replace('.wav', ''); //Create a unic job name\n\n    //Job params\n    const params = {\n        TranscriptionJobName: transcriptionJobName,\n        LanguageCode: \"en-US\",\n        Media: {\n            MediaFileUri: \"s3://audiobucketfortranscirber/\" + audioFile\n        },\n        MediaFormat: \"wav\",\n        MediaSampleRateHertz: 44100,\n        Settings: {\n            MaxSpeakerLabels: 2,\n            ShowSpeakerLabels: true,\n        }\n    };\n\n    //Run the transcriber\n    transcribeService.startTranscriptionJob(params, (err, resp) => {\n        if (err) console.log(err, err.stack);\n        else getTranscriptionStatus(transcriptionJobName, audioFile); //Check the job status\n    });\n}\n\n//Request to the AWS Trascriber job, to get the job status\nfunction getTranscriptionStatus(transcriptionJobName, audioFile) {\n    //Send the request\n    transcribeService.getTranscriptionJob({\n        TranscriptionJobName: transcriptionJobName\n    }, (err, data) => {\n        //Check connection\n        if (err) {\n            console.log('Transcriber Job error:', err);\n            return 0;\n        }\n\n        let job_status = data.TranscriptionJob.TranscriptionJobStatus; //Get the status\n\n        //Manage the status\n        if (job_status == 'FAILED') {\n            console.log('Transcriber process error!');\n        } else if (job_status == 'COMPLETED') {\n            console.log('Transcriber process completed!')\n\n            let result_file_url = data.TranscriptionJob.Transcript.TranscriptFileUri; //Get the Trascriber result file url\n            getTranscriptionData(result_file_url, audioFile); //Get the Transcriber data from the url\n        } else {\n            setImmediate(() => getTranscriptionStatus(transcriptionJobName, audioFile), 20000); //Repeat the request, if there is no result yet\n        }\n    })\n}\n\n//Get Transcriber output\nfunction getTranscriptionData(result_file_url, audioFile) {\n    let outputPath = './data/audio/' + (audioFile.replace('.wav', '.json')); //Output file name\n    let file = fs.createWriteStream(outputPath); //Create a empty file\n\n    //Request the data\n    https.get(result_file_url, (response) => {\n        response.pipe(file);\n\n        //Once request finish, get data\n        file.on('finish', () => {\n            file.close(() => {\n                insertToJSON(outputPath, audioFile)\n            });\n        });\n\n    }).on('error', (err) => console.error('Error downloading JSON file:', err));\n}\n\n//Insert audio transcribed data in an json file\nfunction insertToJSON(outputPath, audioFile) {\n    //One speaker data\n    let newData = {\n        timestamp: undefined,\n        text: [],\n        audio_file: undefined,\n        experienceDetected: \"\",\n        text_emotion: \"\"\n    }\n\n    //Format the comversation\n    formatTheAudioJson(outputPath, newData)\n        .then(() => {\n            //Get the timestamp from the file name\n            let str = audioFile.match(/\\d+/);\n            let timestamp = str ? parseInt(str[0], 10) : null;\n\n            newData.audio_file = audioFile; //Add the audio file name\n            newData.timestamp = timestamp; //Add the audio start timestamp\n\n            try {\n                if (newData.text.length > 0) {\n                    //Read the final json file\n                    fs.readFile(FILE_PATHS.AUDIO_TEXT_FILE_PATH, 'utf8', (err, data) => {\n                        if (err) {\n                            console.error('Error reading JSON file:', err);\n                            return;\n                        }\n\n                        let experienceDetected = detectExterienceSampling(newData); //Detect/Get the experience recording in the extracted text from audio\n\n                        setTimeout(() => {\n                            if (experienceDetected != \"\") newData.experienceDetected = experienceDetected;\n                            else newData.experienceDetected = undefined;\n\n                            let dataObject = JSON.parse(data); //Parse the json data to object\n                            dataObject.push(newData); //Add the new data to the file object\n\n                            let dataJson = JSON.stringify(dataObject, null, 4); //Convert the object to json\n\n\n                            //Write the json file\n                            fs.writeFile(FILE_PATHS.AUDIO_TEXT_FILE_PATH, dataJson, 'utf8', (err) => {\n                                if (err) console.error('Error updating JSON file:', err)\n                            })\n                        }, 1000)\n                    })\n                }\n            } catch (e) {\n                console.log('Error reading the audio json file.')\n            }\n\n            removeAJsonFile(outputPath); //Remove the json file(the transcribed file from one audio data)\n        }).catch(err => {\n            console.log('Error formating: ', err);\n        })\n}\n\n//Format the conversation to json format\nfunction formatTheAudioJson(filePath, respons) {\n    return new Promise(async (resolve, reject) => {\n        readJSONFile(FILE_PATHS.USER_FILE_PATH, (user) => {\n            try {\n                let words, content = '',\n                    newSpeaker = false;\n\n                //Read the input file/from transcriber\n                readJSONFile(filePath, (data) => {\n                    //One speaker data\n                    let speakerData = {\n                        speaker: undefined,\n                        text: ''\n                    }\n\n                    extractEmotionsFromText(data.results.transcripts[0].transcript)\n                        .then(emotion => {\n                            respons.text_emotion = emotion;\n\n                            return true;\n                        }).then(() => {\n                            words = data[\"results\"][\"items\"]; //Get the extracted words\n\n                            let s = 0; //Speakers count\n\n                            for (let i in words) {\n                                let speaker_label = words[i][\"speaker_label\"];\n\n                                //Control the current speaker id\n                                if (!speakerData.speaker) {\n                                    speakerData.speaker = speaker_label; //Set the first speaker\n\n                                    respons.text.push(speakerData); //Add the speakers data\n                                    \n                                } else if (speakerData.speaker != speaker_label) {\n                                    newSpeaker = true;\n                                    speakerData = {\n                                        speaker: '',\n                                        text: ''\n                                    } //Clean the speaker data, prepare for the next speaker\n                                }\n\n                                respons.text[s].text = content.replace(/\\s([.,?!])/g, '$1'); //Update the speaker speach\n\n                                //Change the speaker\n                                if (newSpeaker) {\n                                    s++; //Next speaker\n                                    speakerData.speaker = speaker_label; //Speaker data frame\n                                    \n                                    speakerData.text = '';\n                                    content = '';\n\n                                    respons.text.push(speakerData);\n                                    respons.text[s].text = content.replace(/\\s([.,?!])/g, '$1');\n\n                                    newSpeaker = false;\n                                } else {\n                                    content += ' ';\n                                }\n\n                                content += words[i][\"alternatives\"][0][\"content\"]; //Add the next word\n                                respons.text[s].text = content.replace(/\\s([.,?!])/g, '$1');\n                            }\n\n                            processTextObject(respons, user.currentUser);\n\n                            resolve();\n                        }).catch(err => {\n                            console.log('Error extracting emotions: ', err)\n                        })\n                });\n\n            } catch (err) {\n                reject(err);\n            }\n        })\n    })\n}\n\n//Remove the a file\nfunction removeAJsonFile(filePath) {\n    fs.unlink(filePath, (err) => {\n        if (err) console.error('Error removing file:', err)\n    });\n}\n\n//Detect user exterience from the audio text\nfunction detectExterienceSampling(dataObject) {\n    let str = \"\",\n        data = dataObject.text;\n\n    //Concatinate the discusion in one string\n    for (let i = 0; i < data.length; i++)\n        str += data[i].text + \" \";\n\n    //Define the patterns\n    const pattern1 = new RegExp(`${EXPERIENCE_CONFIG.EXPERIENCE_START_KEYWORDS}(.*?)(?:${EXPERIENCE_CONFIG.EXPERIENCE_END_KEYWORDS})`, 'i'); //Patttern, start and end phrases\n    const pattern2 = new RegExp(`${EXPERIENCE_CONFIG.EXPERIENCE_START_KEYWORDS}(.*?)(?:${EXPERIENCE_CONFIG.EXPERIENCE_END_KEYWORDS}|\\\\b.{0,${EXPERIENCE_CONFIG.EXPERIENCE_AUTO_LENGTH}}\\\\b)`, 'i'); //Pattern, start - no end\n\n    //Find matches\n    const match1 = pattern1.exec(str);\n    const match2 = pattern2.exec(str);\n\n    //Get the result if match is not null\n    if (match1 || match2) {\n        let extractedText = '';\n\n        // Extract the matched text\n        if (match1 && match1[1] != '') extractedText = match1[1].trim();\n        else extractedText = (match2[0].trim()).slice(14);\n\n        return extractedText;\n    } else {\n        return null;\n    }\n}\n\n//Extract wmotions from text using AWS Comprehend\nfunction extractEmotionsFromText(text) {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const params = {\n                LanguageCode: 'en',\n                Text: text\n            };\n            const result = await comprehend.detectSentiment(params).promise();\n\n            resolve(result);\n        } catch (error) {\n            reject(error)\n        }\n    });\n}\n\n//Concatinate audio file to user intro\nfunction concatinateWavFiles(wavFile, callback) {\n    let fileEndTimestamp = extractTimestamp(wavFile),\n        filePath = FILE_PATHS.CONVERTED_AUDIO + \"audio_\" + fileEndTimestamp + \".wav\";\n\n    let userIntro = FILE_PATHS.USER_INTRO_AUDIO_PATH;\n    let userIntroConverted = './data/user/userIntroConverted.wav';   \n    \n    //Convert the User audio intro and concatinate the files\n    exec(`sox ${userIntro} -r 44100 -c 1 ${userIntroConverted}`, (conversionError) => {\n        if (conversionError) {\n            console.error('Error during file conversion:', conversionError);\n        } else {\n            console.log('first', wavFile)\n            const command = `sox ${userIntroConverted} ${wavFile} ${filePath}`;\n            \n            exec(command, (concatenationError) => {\n                if (concatenationError) {\n                    console.error('Error during concatenation:', concatenationError);\n                } else {\n                    console.log('Concatenation successful');\n\n                    fs.unlink(wavFile, (unlinkError) => {\n                        if (unlinkError) {\n                            console.error('Error removing original audio file:', unlinkError);\n                        } else {\n                            console.log('Original audio file removed');\n                        }\n        \n                        callback();\n                    });\n                }\n            });\n\n            \n        }\n    })\n}\n\n//Remove the user introduction text from the conversation an label him\nfunction processTextObject(inputObject, username) {\n    if (inputObject && inputObject.text && Array.isArray(inputObject.text)) {\n        inputObject.text.shift();   //Remove the first element from the 'text' array\n\n        //Rename 'speaker' to 'username' if it is equal to 'spk_0'\n        inputObject.text.forEach((item) => {\n            if (item.speaker === 'spk_0') {\n                item.speaker = username;\n            }\n        });\n    }\n}\n\nexport {\n    sendAudioToAWSS3,\n    insertToJSON,\n    detectExterienceSampling,\n    concatinateWavFiles\n}",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/aws_services.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "transcribeService",
    "memberof": "modules/aws_services.js",
    "static": true,
    "longname": "modules/aws_services.js~transcribeService",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "S3",
    "memberof": "modules/aws_services.js",
    "static": true,
    "longname": "modules/aws_services.js~S3",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "comprehend",
    "memberof": "modules/aws_services.js",
    "static": true,
    "longname": "modules/aws_services.js~comprehend",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "transcribeTheAudioFile",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~transcribeTheAudioFile",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "audioFile",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "getTranscriptionStatus",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~getTranscriptionStatus",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "transcriptionJobName",
        "types": [
          "*"
        ]
      },
      {
        "name": "audioFile",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "getTranscriptionData",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~getTranscriptionData",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "result_file_url",
        "types": [
          "*"
        ]
      },
      {
        "name": "audioFile",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "formatTheAudioJson",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~formatTheAudioJson",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "respons",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "removeAJsonFile",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~removeAJsonFile",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "extractEmotionsFromText",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~extractEmotionsFromText",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "processTextObject",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~processTextObject",
    "access": "public",
    "export": false,
    "importPath": "server/modules/aws_services.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "params": [
      {
        "name": "inputObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "username",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "sendAudioToAWSS3",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~sendAudioToAWSS3",
    "access": "public",
    "export": true,
    "importPath": "server/modules/aws_services.js",
    "importStyle": "{sendAudioToAWSS3}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "audioFile",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "insertToJSON",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~insertToJSON",
    "access": "public",
    "export": true,
    "importPath": "server/modules/aws_services.js",
    "importStyle": "{insertToJSON}",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "outputPath",
        "types": [
          "*"
        ]
      },
      {
        "name": "audioFile",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "detectExterienceSampling",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~detectExterienceSampling",
    "access": "public",
    "export": true,
    "importPath": "server/modules/aws_services.js",
    "importStyle": "{detectExterienceSampling}",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "params": [
      {
        "name": "dataObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "concatinateWavFiles",
    "memberof": "modules/aws_services.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/aws_services.js~concatinateWavFiles",
    "access": "public",
    "export": true,
    "importPath": "server/modules/aws_services.js",
    "importStyle": "{concatinateWavFiles}",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "params": [
      {
        "name": "wavFile",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "modules/client-routes.js",
    "content": "import express from 'express';\nimport ini from 'ini';\nimport fs from 'fs';\nimport csv from 'csv-parser';\nimport path from \"path\";\nimport { saveData } from './utility.js';\nimport { FILE_PATHS } from './server_settings.js';\nimport { SERVER_CONFIG } from './server_settings.js';\nimport { rigControl } from './rig_controller.js';\nimport { cleanCSVFile } from './file_cleaners.js';\n\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//Clien web-service\n//////////////////////////////////////////////////////////////////////////////////\n\nconst webClientRoutes = express.Router();\n\n//Web interface/web page\nwebClientRoutes.get(\"/\", (req, res) => res.sendFile(path.join(__dirname, '/webclient/index.html')));\n\n//Get rig status for the web client /Web client webservice\nwebClientRoutes.get('/rigStatus', (req, res) => res.json({\n    rigActive: SERVER_CONFIG.rigActive,\n    imagesNumber: SERVER_CONFIG.imagesNumber,\n    audioNumber: SERVER_CONFIG.audioNumber,\n    gsrNumber: SERVER_CONFIG.gsrNumber\n}));\n\n//Save new configs to the file\nwebClientRoutes.get(\"/rigStart\", (req, res) => {\n    cleanCSVFile(FILE_PATHS.CLIENT_GSR_GRAPH_FILE_PATH, 'Timestamp,GSR');\n    cleanCSVFile(FILE_PATHS.CLIENT_EMOTIONS_PATH, 'startTime,endTime,Emotion\\n');\n    handleRigControl(req, res, \"start\")\n});\n\n//Save new configs to the file\nwebClientRoutes.get(\"/rigStop\", (req, res) => handleRigControl(req, res, \"stop\"));\n\n//Get gsr data from the file\nwebClientRoutes.get('/gsrData', (req, res) => {\n    readFileAndHandleErrors(FILE_PATHS.CLIENT_GSR_GRAPH_FILE_PATH, res, (data) => {\n        let rows = data.trim().split('\\n'),\n            header = rows[0].split(','),\n            gsr_data = rows.slice(1).map(row => row.split(',').map(parseFloat));\n\n        res.status(200).json({ header, gsr_data });\n    })\n});\n\n//getRigConfigFile\nwebClientRoutes.get('/getConfig', (req, res) => {\n    readFileAndHandleErrors(FILE_PATHS.CONFIG_FILE_PATH, res, (data) => {\n        const config = ini.parse(data)\n        res.status(200).json({ config });\n    })\n});\n\n//Save new configs to the file\nwebClientRoutes.post(\"/saveConfig\", (req, res) => {\n    const config = req.body.config,\n        iniConfig = ini.stringify(config);\n\n    fs.writeFile(FILE_PATHS.CONFIG_FILE_PATH, iniConfig, (err) => {\n        if (err) {\n            config.toUpdateConfig = false;\n            console.error('Error saving INI file:', err);\n            res.status(500);\n        } else {\n            config.toUpdateConfig = true;\n            rigControl('config');\n            res.status(200);\n        }\n    });\n});\n\n//Save new configs to the file\nwebClientRoutes.get(\"/getEmotions\", (req, res) => {\n    readFileAndHandleErrors(FILE_PATHS.CLIENT_EMOTIONS_PATH, res, (data) => {\n        let rows = data.trim().split('\\n'),\n            header = rows[0].split(','),\n            emotions = rows.slice(1).map(row => row.split(','));\n\n        res.status(200).json({ header, emotions });\n    });\n});\n\n//Set the new username and session start time\nwebClientRoutes.post('/setNewUserName', (req, res) => {\n    let name = req.body.userName;\n\n    readFileAndHandleErrors(FILE_PATHS.USER_FILE_PATH, res, (data) => {\n        let userData = JSON.parse(data); //Get the data from the json file\n\n        userData.sessionStart = Math.floor(Date.now() / 1000);\n        userData.currentUser = name;\n\n        let updatedData = JSON.stringify(userData, null, 4);\n\n        //Rewrite the json file\n        fs.writeFile(FILE_PATHS.USER_FILE_PATH, updatedData, 'utf8', (err) => {\n            if (err) console.error('Error updating JSON file:', err)\n        })\n\n        res.status(200)\n    })\n})\n\n//Get the user name and session start time\nwebClientRoutes.get('/getUserName', (req, res) => {\n    readFileAndHandleErrors(FILE_PATHS.USER_FILE_PATH, res, (data) => {\n        res.send(data);\n    })\n})\n\n//Get Extracted Audio text\nwebClientRoutes.get('/getAudioText', (req, res) => {\n    readFileAndHandleErrors(FILE_PATHS.AUDIO_TEXT_FILE_PATH, res, (data) => {\n        res.send(data)\n    })\n});\n\n//Get extracted Image text\nwebClientRoutes.get('/getImageText', (req, res) => {\n    readCsvAndHandleErrors(FILE_PATHS.IMAGE_TEXT_FILE_PATH, res, (data) => {\n        res.json(data)\n    })\n});\n\n//Save audio user intro\nwebClientRoutes.post(\"/saveAudioIntro\", saveData('user', 'audio'), (req, res) => {\n    res.json({\n        success: true,\n        message: 'Audio data saved successfully.'\n    });\n});\n\nwebClientRoutes.get(\"/getAllSessions\", (req, res) => {\n    fs.readdir(FILE_PATHS.SESSION_FOLDER, (err, files) => {\n        if (err) {\n            console.error('Error reading folder:', err);\n            return;\n        }\n\n        //Filter files with the extension '.json'\n        const matchingFiles = files.map(file => {\n            const extension = path.extname(file),\n                fileName = path.basename(file, extension);\n\n            if(extension === '.json') return fileName;\n        })\n\n        res.json(matchingFiles);\n    }) \n});\n\n\nwebClientRoutes.post(\"/getAllImages\", (req, res) => {\n    let startTime = Math.floor(req.body.startTime / 1000);\n\n    fs.readdir(FILE_PATHS.PROCESSED_IMAGES, (err, files) => {\n        if (err) {\n            console.error('Error reading folder:', err);\n            return;\n        }\n\n        //Filter files with the extension '.json'\n        const matchingFiles = files.filter(file => {\n            const extension = path.extname(file),\n                fileName = path.basename(file, extension);\n\n            let time = parseInt(fileName.split(\"-\")[0]);\n            let diferenceTime = time - startTime;\n            let frameTime = 60 * 60;\n\n            if(extension === '.jpg' && diferenceTime < frameTime) return fileName;\n        })\n\n        res.json(matchingFiles);\n    }) \n});\n\n\nwebClientRoutes.post(\"/getAllAudioFiles\", (req, res) => {\n    let startTime = Math.floor(req.body.startTime / 1000);\n\n    fs.readdir(FILE_PATHS.CONVERTED_AUDIO, (err, files) => {\n        if (err) {\n            console.error('Error reading folder:', err);\n            return;\n        }\n\n        //Filter files with the extension '.json'\n        const matchingFiles = files.filter(file => {\n            const extension = path.extname(file),\n                fileName = path.basename(file, extension);\n\n            let time = parseInt((fileName.split(\"_\")[1]).split(\".\")[0]);\n            let diferenceTime = time - startTime;\n            let frameTime = 60 * 60;\n\n            if(extension === '.wav' && diferenceTime < frameTime) return fileName;\n        })\n\n        res.json(matchingFiles);\n    }) \n});\n\n\n//Read the file and return the file content\nwebClientRoutes.post(\"/getOutputFileContent\", (req, res) => {\n    const requestBody = req.body;\n\n    if (!requestBody || !requestBody.fileName) {\n        return res.status(400).json({ error: 'Invalid request. fileName is required.' });\n    }\n\n    let filePath = FILE_PATHS.SESSION_FOLDER + requestBody.fileName;\n\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return res.status(500).json({ error: 'Error reading file.', details: err.message });\n        }\n\n        //Parse the JSON data\n        let jsonOutput;\n\n        try {\n            jsonOutput = JSON.parse(data);\n        } catch (parseError) {\n            return res.status(500).json({ error: 'Error parsing JSON.', details: parseError.message });\n        }\n\n        //Send back the json file content\n        res.json(jsonOutput);\n    });\n\n\n})\n\n//Read the file and return the file content\nwebClientRoutes.post(\"/getAudioFilePath\", (req, res) => {\n    const audioFileName = req.body.audioFileName;\n    const __dirname = path.resolve();\n\n    const audioFilePath = path.join(__dirname, 'data', 'audio', 'processed_audio', audioFileName);\n\n    res.sendFile(audioFilePath)\n\n})\n\n//Read the file and return the file content\nwebClientRoutes.post(\"/getImage\", (req, res) => {\n    const imageName = req.body.imageName;\n    const __dirname = path.resolve();\n\n    const imagePath = path.join(__dirname, 'data', 'images', 'processed_images', imageName);\n\n    res.sendFile(imagePath)\n\n})\n\n\n//################################################################################################################################################\n// Functions\n//################################################################################################################################################\n\n//Read a JSON file function with callback\nfunction readFileAndHandleErrors(filePath, res, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error(err);\n            res.status(500);\n        } else {\n            callback(data);\n        }\n    });\n}\n\n//Handle rig control\nfunction handleRigControl(req, res, action) {\n    rigControl(action);\n    res.status(200);\n}\n\n//Read CSV file\nfunction readCsvAndHandleErrors(filePath, res, callback) {\n    try {\n        const data = [];\n\n        fs.createReadStream(filePath)\n            .pipe(csv())\n            .on('data', (row) => {\n                data.push(row);\n            })\n            .on('end', () => {\n                // Transform data and extract information\n                const transformedData = data.map((item) => {\n                    const imageNameMatch = item.image.match(/(\\d+)-stream\\.jpg/),\n                        imageId = imageNameMatch ? imageNameMatch[1] : null;\n\n                    return {\n                        imageName: item.image,\n                        imageTime: new Date(parseInt(imageId) * 1000).toLocaleString(),\n                        text: item.text,\n                    };\n                });\n\n                callback(transformedData);\n            }).on('error', (err) => {\n                console.error('Error reading CSV:', err);\n                res.status(500).send('Internal Server Error');\n            });\n    } catch (err) {\n        console.log('Error reading CSV file: ', err);\n    }\n}\n//Export\nexport {  webClientRoutes }",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/client-routes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "readFileAndHandleErrors",
    "memberof": "modules/client-routes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/client-routes.js~readFileAndHandleErrors",
    "access": "public",
    "export": false,
    "importPath": "server/modules/client-routes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "res",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "handleRigControl",
    "memberof": "modules/client-routes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/client-routes.js~handleRigControl",
    "access": "public",
    "export": false,
    "importPath": "server/modules/client-routes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "params": [
      {
        "name": "req",
        "types": [
          "*"
        ]
      },
      {
        "name": "res",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "readCsvAndHandleErrors",
    "memberof": "modules/client-routes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/client-routes.js~readCsvAndHandleErrors",
    "access": "public",
    "export": false,
    "importPath": "server/modules/client-routes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "res",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "webClientRoutes",
    "memberof": "modules/client-routes.js",
    "static": true,
    "longname": "modules/client-routes.js~webClientRoutes",
    "access": "public",
    "export": true,
    "importPath": "server/modules/client-routes.js",
    "importStyle": "{webClientRoutes}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "modules/cortex.js",
    "content": "import WebSocket from 'ws';\nimport fs from \"fs\";\n\n//Headset responses code\nconst WARNING_CODE_HEADSET_DISCOVERY_COMPLETE = 142;\nconst WARNING_CODE_HEADSET_CONNECTED = 104;\n\n\n//EEG Headset controler\nexport class Cortex {\n    constructor(user, socketUrl) {\n        //Data web-socket\n        this.socket = new WebSocket(socketUrl, { rejectUnauthorized: false });\n\n        //Start settings\n        this.user = user\n        this.isHeadsetConnected = false\n    }\n\n    //Sumscript to the data, get data from the headset\n    sub(streams){\n        this.socket.on('open',async ()=>{\n            //Check the authentification \n            await this.checkGrantAccessAndQuerySessionInfo()\n\n            //Run the subbscription to the data\n            this.subRequest(streams, this.authToken, this.sessionId)\n        })\n    }\n\n    //Refresh headset list /scaning the available devices\n    refreshHeadsetList() {\n        const REFRESH_HEADSET_LIST_ID = 14;\n\n        const refreshHeadsetListRequest = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": REFRESH_HEADSET_LIST_ID,\n            \"method\": \"controlDevice\",\n            \"params\": {\n                \"command\": \"refresh\"\n            }\n        };\n\n        //Send the command to refresh the bluetooth scanner\n        socket.send(JSON.stringify(refreshHeadsetListRequest));\n    }\n\n    //Query headset id\n    queryHeadsetId() {\n        return new Promise((resolve, reject) => {\n            const QUERY_HEADSET_ID = 2;\n            let socket = this.socket;\n\n            let queryHeadsetRequest = {\n                \"jsonrpc\": \"2.0\",\n                \"id\": QUERY_HEADSET_ID,\n                \"method\": \"queryHeadsets\",\n                \"params\": {}\n            };\n\n            const sendQueryRequest = () => {\n                socket.send(JSON.stringify(queryHeadsetRequest));\n            };\n            \n            sendQueryRequest();\n    \n            //Check headset availability/ manage response message\n            socket.on('message', (data) => {\n                try {\n                    if(JSON.parse(data)['id']==QUERY_HEADSET_ID){\n                        if(JSON.parse(data)['result'].length > 0){\n                            JSON.parse(data)['result'].forEach(headset => {\n                                if (headset['status'] === 'connected') {\n                                    this.isHeadsetConnected = true;\n                                }\n                            });\n                            resolve(JSON.parse(data))\n                        } else {\n                            console.log('No have any headset, please connect headset with your pc.')\n                            this.isHeadsetConnected = false\n                        }\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            });\n    \n            //Schedule subsequent requests every 1 minute\n            setInterval(sendQueryRequest, 60000);\n        });\n    }\n\n    //Request acces to the api/headset\n    requestAccess(){\n        let socket = this.socket\n        let user = this.user\n\n        return new Promise(function(resolve, reject){\n            const REQUEST_ACCESS_ID = 1\n\n            let requestAccessRequest = {\n                \"jsonrpc\": \"2.0\", \n                \"method\": \"requestAccess\", \n                \"params\": { \n                    \"clientId\": user.clientId, \n                    \"clientSecret\": user.clientSecret\n                },\n                \"id\": REQUEST_ACCESS_ID\n            }\n\n            //Request acces\n            socket.send(JSON.stringify(requestAccessRequest));\n\n            //Handle request acces response\n            socket.on('message', (data)=>{\n                try {\n                    if(JSON.parse(data)['id'] == REQUEST_ACCESS_ID) resolve(data);\n                } catch (error) {}\n            })\n        })\n    }\n\n    //Control hadset\n    controlDevice(headsetId){\n        let socket = this.socket\n        const CONTROL_DEVICE_ID = 3\n\n        let controlDeviceRequest = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": CONTROL_DEVICE_ID,\n            \"method\": \"controlDevice\",\n            \"params\": {\n                \"command\": \"connect\",\n                \"headset\": headsetId\n            }\n        }\n\n        return new Promise(function(resolve, reject){\n            socket.send(JSON.stringify(controlDeviceRequest));\n\n            socket.on('message', (data)=>{\n                try {\n                    let response = JSON.parse(data);\n                    if(response['id'] == CONTROL_DEVICE_ID){\n                        if(response.error) {\n                            console.log(response.error.message);\n                            setTimeout(() => {\n                                socket.send(JSON.stringify(controlDeviceRequest));\n                            }, 10000);\n                        } else {\n                            resolve(response);\n                        }\n                    }\n                } catch (error) {}\n            })\n        }) \n    }\n\n    //Authorize user\n    authorize(){\n        let socket = this.socket\n        let user = this.user\n\n        return new Promise(function(resolve, reject){\n            const AUTHORIZE_ID = 4\n\n            let authorizeRequest = { \n                \"jsonrpc\": \"2.0\", \"method\": \"authorize\", \n                \"params\": { \n                    \"clientId\": user.clientId, \n                    \"clientSecret\": user.clientSecret, \n                    \"license\": user.license,\n                    \"debit\": user.debit\n                },\n                \"id\": AUTHORIZE_ID\n            }\n\n            socket.send(JSON.stringify(authorizeRequest))\n\n            socket.on('message', (data)=>{\n                try {\n                    if(JSON.parse(data)['id']==AUTHORIZE_ID){\n                        let cortexToken = JSON.parse(data)['result']['cortexToken']\n                        resolve(cortexToken)\n\n                        //Call controlDevice(\"refresh\") when authorization is successful\n                        this.refreshHeadsetList();\n                    }\n                } catch (error) {}\n            })\n        })\n    }\n\n    //Create session with the headset\n    createSession(authToken, headsetId) {\n        const CREATE_SESSION_ID = 5;\n\n        return new Promise(async (resolve, reject) => {\n            let socket = this.socket;\n            let sessionId;\n\n            const checkHeadsetId = async () => {\n                const response = await this.queryHeadsetId();\n\n                const found = response[\"result\"].find(item => String(item[\"id\"]) === String(headsetId) && item[\"status\"] === \"connected\");\n                if (found) {\n                    clearInterval(queryInterval);\n\n                    let createSessionRequest = {\n                        \"jsonrpc\": \"2.0\",\n                        \"id\": CREATE_SESSION_ID,\n                        \"method\": \"createSession\",\n                        \"params\": {\n                            \"cortexToken\": authToken,\n                            \"headset\": headsetId,\n                            \"status\": \"active\"\n                        }\n                    };\n\n                    socket.send(JSON.stringify(createSessionRequest));\n    \n                    socket.on('message', (data) => {\n                        let parsedData = JSON.parse(data);\n\n                        if (parsedData.id === CREATE_SESSION_ID) {\n                            sessionId = parsedData['result']['id'];\n                            resolve(sessionId);\n                        }\n                    });\n                }\n            };\n            const queryInterval = setInterval(checkHeadsetId, 30000);\n            checkHeadsetId();\n        });\n    }\n\n    //Subrequest, sned the subscription to the EEG data, and handle the result \n    subRequest(stream, authToken, sessionId){\n        let socket = this.socket\n        const SUB_REQUEST_ID = 6 \n\n        let subRequest = { \n            \"jsonrpc\": \"2.0\", \n            \"method\": \"subscribe\", \n            \"params\": { \n                \"cortexToken\": authToken,\n                \"session\": sessionId,\n                \"streams\": stream\n            }, \n            \"id\": SUB_REQUEST_ID\n        }\n\n        socket.send(JSON.stringify(subRequest))\n\n        //Handle data receiving\n        socket.on('message', (data)=>{\n            try {\n                let parsedData = JSON.parse(data.toString('utf8')); //Received data from the headsetr\n                //console.log(parsedData + '\\r\\n'));\n\n                this.handleData(parsedData); //Format data and save\n            } catch (error) {}\n        })\n    }\n\n    /**\n     * - query headset infor\n     * - connect to headset with control device request\n     * - authentication and get back auth token\n     * - create session and get back session id\n     */\n    async querySessionInfo(){\n        let qhResult = \"\", headsetId = \"\", ctResult = \"\", authToken = \"\", sessionId = \"\"\n\n        //Query headset id\n        await this.queryHeadsetId().then((result)=>{qhResult = result})\n        this.qhResult = qhResult\n        this.headsetId = qhResult['result'][0]['id']\n\n        //Control device\n        await this.controlDevice(this.headsetId).then((result)=>{ctResult=result})\n        this.ctResult = ctResult\n        console.log(ctResult)\n\n        //Authorize session\n        await this.authorize().then((auth)=>{authToken = auth})\n        this.authToken = authToken\n\n        //Create session\n        await this.createSession(authToken, this.headsetId).then((result)=>{sessionId=result})\n        this.sessionId = sessionId\n    }\n\n    /**\n     * - check if user logined\n     * - check if app is granted for access\n     * - query session info to prepare for sub and train\n    */\n    async checkGrantAccessAndQuerySessionInfo(){\n        let requestAccessResult = \"\"\n\n        //Request acces\n        await this.requestAccess().then((result)=>{requestAccessResult=result})\n\n        //Acces status\n        let accessGranted = JSON.parse(requestAccessResult)\n    \n        //Check if user is logged in CortexUI\n        if (\"error\" in accessGranted){\n            console.log('You must login on CortexUI before request for grant access then rerun')\n            throw new Error('You must login on CortexUI before request for grant access')\n        }else{\n            console.log(accessGranted['result']['message'])\n            // console.log(accessGranted['result'])\n            if(accessGranted['result']['accessGranted']){\n                await this.querySessionInfo()\n            }\n            else{\n                console.log('You must accept access request from this app on CortexUI then rerun')\n                throw new Error('You must accept access request from this app on CortexUI')\n            }\n        }   \n    }\n\n    //Listend the socket warnings\n    listenForWarnings() {\n        this.socket.on('message', (data) => {\n            try {\n                const message = JSON.parse(data);\n                if (message.warning) {\n                    console.log('Warning Received Code:', message.warning.code);\n                    console.log('Message:', message.warning.message);\n                    console.log('--------------------------------------');\n\n                    if (message.warning.code === WARNING_CODE_HEADSET_CONNECTED) {\n                        this.isHeadsetConnected = true;\n                    }\n\n                    // After headset scanning finishes, if no headset is connected yet, the app should call the controlDevice(\"refresh\") again\n                    if (message.warning.code === WARNING_CODE_HEADSET_DISCOVERY_COMPLETE && !this.isHeadsetConnected) {\n                        this.refreshHeadsetList();\n                    }\n                } \n            } catch (error) {}\n        });\n    }\n\n    //Handle received data\n    handleData(receivedData) {\n        let type = Object.keys(receivedData)[0];\n\n        if(type == \"eeg\") {\n            //Row EEG data\n            this.insertDataToJsonl(\"row_eeg.jsonl\", receivedData);\n        } else if(type == \"fac\") {\n            //Facial Expresions\n            this.insertDataToJsonl(\"facial_expressions.jsonl\", receivedData);\n        } else if(type == \"pow\") {\n            //Performance metrics\n            this.insertDataToJsonl(\"power_of_sensors.jsonl\", receivedData);\n        } else if(type == \"met\") {\n            //Performance metrics\n            this.insertDataToJsonl(\"performance_metrics.jsonl\", receivedData);\n        }\n    }\n\n    //Append received data to file\n    insertDataToJsonl(fileName, data) {\n        let jsonData = JSON.stringify(data) + \"\\n\"; //jsonl line\n\n        fs.appendFile(\"./data/eeg/\" + fileName, jsonData, (error) => {\n            if(error) throw error;\n            \n            //console.log('Data appended to', fileName);\n        })\n\n    }\n\n    //Run the headset streaming\n    run() {\n        this.listenForWarnings();\n\n        /*\n            Have six kind of stream data ['fac', 'pow', 'eeg', 'mot', 'met', 'com']\n\n            eeg - The raw EEG data from the headset\n            fac - The results of the facial expressions detection\n            met - The results of the performance metrics detection (Attention level, Stress level, etc)\n\n            mot - The motion data from the headset\n            pow - The band power of each EEG sensor. It includes the alpha, low beta, high beta, gamma, and theta bands\n            com - The results of the mental commands detection. \n        */\n        let streams = ['eeg', 'fac', 'met', 'pow']\n\n        this.sub(streams);\n    }\n    \n}\n\n\n\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/cortex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "WARNING_CODE_HEADSET_DISCOVERY_COMPLETE",
    "memberof": "modules/cortex.js",
    "static": true,
    "longname": "modules/cortex.js~WARNING_CODE_HEADSET_DISCOVERY_COMPLETE",
    "access": "public",
    "export": false,
    "importPath": "server/modules/cortex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "WARNING_CODE_HEADSET_CONNECTED",
    "memberof": "modules/cortex.js",
    "static": true,
    "longname": "modules/cortex.js~WARNING_CODE_HEADSET_CONNECTED",
    "access": "public",
    "export": false,
    "importPath": "server/modules/cortex.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "Cortex",
    "memberof": "modules/cortex.js",
    "static": true,
    "longname": "modules/cortex.js~Cortex",
    "access": "public",
    "export": true,
    "importPath": "server/modules/cortex.js",
    "importStyle": "{Cortex}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "socket",
    "memberof": "modules/cortex.js~Cortex",
    "static": false,
    "longname": "modules/cortex.js~Cortex#socket",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "user",
    "memberof": "modules/cortex.js~Cortex",
    "static": false,
    "longname": "modules/cortex.js~Cortex#user",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "isHeadsetConnected",
    "memberof": "modules/cortex.js~Cortex",
    "static": false,
    "longname": "modules/cortex.js~Cortex#isHeadsetConnected",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "sub",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#sub",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "streams",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "refreshHeadsetList",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#refreshHeadsetList",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "queryHeadsetId",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#queryHeadsetId",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "requestAccess",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#requestAccess",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "controlDevice",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#controlDevice",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "headsetId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "authorize",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#authorize",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "createSession",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#createSession",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "authToken",
        "types": [
          "*"
        ]
      },
      {
        "name": "headsetId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "subRequest",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#subRequest",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "params": [
      {
        "name": "stream",
        "types": [
          "*"
        ]
      },
      {
        "name": "authToken",
        "types": [
          "*"
        ]
      },
      {
        "name": "sessionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "querySessionInfo",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "modules/cortex.js~Cortex#querySessionInfo",
    "access": "public",
    "description": "- query headset infor\n- connect to headset with control device request\n- authentication and get back auth token\n- create session and get back session id",
    "lineNumber": 272,
    "params": [],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "qhResult",
    "memberof": "modules/cortex.js~Cortex",
    "static": false,
    "longname": "modules/cortex.js~Cortex#qhResult",
    "access": "public",
    "description": null,
    "lineNumber": 277,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "headsetId",
    "memberof": "modules/cortex.js~Cortex",
    "static": false,
    "longname": "modules/cortex.js~Cortex#headsetId",
    "access": "public",
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "ctResult",
    "memberof": "modules/cortex.js~Cortex",
    "static": false,
    "longname": "modules/cortex.js~Cortex#ctResult",
    "access": "public",
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "authToken",
    "memberof": "modules/cortex.js~Cortex",
    "static": false,
    "longname": "modules/cortex.js~Cortex#authToken",
    "access": "public",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "sessionId",
    "memberof": "modules/cortex.js~Cortex",
    "static": false,
    "longname": "modules/cortex.js~Cortex#sessionId",
    "access": "public",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "checkGrantAccessAndQuerySessionInfo",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "modules/cortex.js~Cortex#checkGrantAccessAndQuerySessionInfo",
    "access": "public",
    "description": "- check if user logined\n- check if app is granted for access\n- query session info to prepare for sub and train",
    "lineNumber": 299,
    "params": [],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "listenForWarnings",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#listenForWarnings",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "handleData",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#handleData",
    "access": "public",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "params": [
      {
        "name": "receivedData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "insertDataToJsonl",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#insertDataToJsonl",
    "access": "public",
    "description": null,
    "lineNumber": 368,
    "undocument": true,
    "params": [
      {
        "name": "fileName",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "run",
    "memberof": "modules/cortex.js~Cortex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "modules/cortex.js~Cortex#run",
    "access": "public",
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "modules/file_cleaners.js",
    "content": "import { promisify } from \"util\";\nimport { join } from 'path';\nimport fs, { readdir, unlink } from 'fs';\nimport { FILE_PATHS } from \"./server_settings.js\";\n\n////////////////////////////////////////////////////////////////////////////\n//REMOVE FILES/ file cleaners\n////////////////////////////////////////////////////////////////////////////\n\n//Remove images from the directory\nfunction removeStreamFiles(directoryPath) {\n\treaddir(directoryPath, (err, files) => {\n\t\tif (err) {\n\t\t\tconsole.error('Error reading directory:', err);\n\t\t\treturn;\n\t\t}\n\n\t\tfiles.forEach((file) => {\n\t\t\tif (file.includes('stream') || file.includes('audio')) {\n\t\t\t\tconst filePath = join(directoryPath, file);\n\t\t\t\tunlink(filePath, (error) => {\n\t\t\t\t\tif (error) console.error(`Error deleting file ${file}:`, error)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n}\n\n//Empty the data files\nasync function emptyAllFiles() {\n\ttry {\n\t\tconst writeFile = promisify(fs.writeFile);\n\t\tconst filesToEmpty = [FILE_PATHS.GSR_SECTIONS_JSON_PATH, FILE_PATHS.AUDIO_TEXT_FILE_PATH];\n\n\t\t//Empty the content of each file\n\t\tawait Promise.all(filesToEmpty.map(async (filename) => {\n\t\t\tawait writeFile(filename, JSON.stringify([]));\n\t\t}));\n\n\t\tcleanCSVFile(FILE_PATHS.IMAGE_TEXT_FILE_PATH, 'image,text\\n');\n\n\t\tFILE_PATHS.EEG_FILES_LIST.forEach(file => {\n\t\t\tcleanJSONL(file);\n\t\t});\n\t} catch (err) {\n\t\tconsole.log('Error cleaning files: ', err);\n\t}\n}\n\n//Empty the Image csv file\nfunction cleanCSVFile(filePath, content) {\n\ttry {\n\t\t//Write the new content to the CSV file\n\t\tfs.writeFile(filePath, content, () => {});\n\t} catch (err) {\n\t\tconsole.error('Error resetting CSV file:', err);\n\t}\n}\n\n//Clean the JSONL file\nfunction cleanJSONL(filePath) {\n\ttry {\n\t\tfs.truncateSync(filePath, 0);\n\t} catch (error) {\n\t\tconsole.log('Error cleaning JSONL file', error);\n\t}\n}\n\n//Clean old row files\nfunction cleanOldRowData() {\n\tlet folders = [\"data/audio/row_audio\", \"data/images/row_images\"];\n\n\tfolders.forEach(folder => {\n\t\tremoveStreamFiles(folder);\n\t});\n}\n\n\n//Export\nexport {\n\tremoveStreamFiles,\n\tcleanOldRowData,\n\temptyAllFiles,\n\tcleanCSVFile\n}",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/file_cleaners.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "cleanJSONL",
    "memberof": "modules/file_cleaners.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/file_cleaners.js~cleanJSONL",
    "access": "public",
    "export": false,
    "importPath": "server/modules/file_cleaners.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "removeStreamFiles",
    "memberof": "modules/file_cleaners.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/file_cleaners.js~removeStreamFiles",
    "access": "public",
    "export": true,
    "importPath": "server/modules/file_cleaners.js",
    "importStyle": "{removeStreamFiles}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "directoryPath",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "cleanOldRowData",
    "memberof": "modules/file_cleaners.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/file_cleaners.js~cleanOldRowData",
    "access": "public",
    "export": true,
    "importPath": "server/modules/file_cleaners.js",
    "importStyle": "{cleanOldRowData}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "emptyAllFiles",
    "memberof": "modules/file_cleaners.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "modules/file_cleaners.js~emptyAllFiles",
    "access": "public",
    "export": true,
    "importPath": "server/modules/file_cleaners.js",
    "importStyle": "{emptyAllFiles}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "cleanCSVFile",
    "memberof": "modules/file_cleaners.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/file_cleaners.js~cleanCSVFile",
    "access": "public",
    "export": true,
    "importPath": "server/modules/file_cleaners.js",
    "importStyle": "{cleanCSVFile}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "content",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "modules/gsr_procesor.js",
    "content": "import util from \"util\";\nimport fs from 'fs';\nimport { exec } from 'child_process';\nimport { FILE_PATHS } from \"./server_settings.js\";\nimport { readJSONFile, writeJSONFile } from \"./utility.js\";\n\n////////////////////////////////////////////////////////////////////////////\n//GSR processing\n////////////////////////////////////////////////////////////////////////////\n\nlet isDataUpdated = false;       //To update the GSR session\n\n//Predict GSR section emotion\nasync function predictGSREmotion(inputGSR) {\n    try {\n        const inputGSRString = inputGSR.join(',');\n        const command = `python3 ./processors/gsr_predict_emotion.py ${inputGSRString}`;\n\n        const { stdout, stderr } = await util.promisify(exec)(command);\n        const emotion = stdout.trim();\n\n        return emotion;\n    } catch(error) {\n        console.error(`Error: ${error.message}`);\n    }\n}\n\n//Save GSR data to a csv file/ used for graphs visualisation\nfunction processGSRoutput(data, nr) {\n    let value = parseInt(data), \n        notConnectedvalue = 600;    //600+ when the sensors are not connected\n    \n    if(value < notConnectedvalue) {\n        //Save dat  to a csv file\n        let timestamp =  Math.floor(Date.now() / 1000); \n        const data = `\\n${timestamp}, ${value}`;\n\n        let filePath = `./data/gsr/gsr_training_data/gsrData${nr}.csv`;     //Creates a file that represent the gsr section for graph visualisation\n\n        if(nr == false) filePath = `./data/gsr/client_graph/gsr_graph.csv`;\n\n        createFileIfNotExists(filePath , \"Timestamp,GSR\");\n\n        fs.appendFile(filePath, data, \"utf-8\", (err) => {\n            if (err) console.log(err);\n            else console.log(\"GSR data saved: \" + value);\n        });\n    }\n}\n\n//Simple gsr data labeling from Low to High\nfunction predictSwetingLevel(value) {\n    if(value > 400) {\n        return \"High\";\n    } else if(value > 350) {\n        return \"Medium\";\n    } else if(value > 300) {\n        return \"Normal\";\n    } else if(value > 250) {\n        return \"Low\";\n    } else {\n        return \"Minimal\";\n    }\n}\n\n//Insert data into 3 minuts sections All files\nfunction insertGSRData(data, dataValue, data2) {\n    let value = parseInt(dataValue),\n        notConnectedvalue = 600;\n\n    let timestamp =  Math.floor(Date.now() / 1000); \n    let swetingLevel = predictSwetingLevel(value);\n\n    let formatedData = {\n        [timestamp]: value,\n        level: swetingLevel\n    }\n\n    if(value < notConnectedvalue) {\n        if(data.startTime == null) {\n            data.startTime = Math.floor(Date.now() / 1000);\n            isDataUpdated = true;\n        }\n        data.gsrData.push(formatedData);\n    } else {\n        data.artefacts ++;\n    }\n\n    if(data.artefacts >= 3) {\n        data.startTime = Math.floor(Date.now() / 1000);\n        data.artefacts = 0;\n    }\n\n    //processGSRoutput(dataValue, data2.fileNumb); //Creates separate files of each section/for manual lm training\n    \n    if(Math.floor(Date.now() / 1000) - data.startTime >= 3 * 60 && data.startTime != null && (data.gsrData).length >= 60 && isDataUpdated) {\n            console.log('Insert GSR section')\n            data.finishTime = Math.floor(Date.now() / 1000); \n            isDataUpdated = false;\n\n            writeSectionToCSV(data, () => {\n                data2.fileNumb++;\n                isDataUpdated = true;\n            });  \n    }\n}\n\n//Append the GSR section to the json output file \nasync function writeSectionTOJSON(gsrSection) {\n    readJSONFile(FILE_PATHS.GSR_SECTIONS_JSON_PATH, (dataObject) => {\n        dataObject.push(gsrSection);                                    // Append new data\n        writeJSONFile(FILE_PATHS.GSR_SECTIONS_JSON_PATH, dataObject);   // Rewrite the JSON file\n    });\n}\n\n//Write gsr emotions\nfunction writeClientGSREmotionsToCSV(data) {\n    createFileIfNotExists(FILE_PATHS.CLIENT_EMOTIONS_PATH, \"Emotion\");\n\n    const csvRow = `${data.startTime},${data.endTime},\"${ data.emotion_state }\"\\n`;\n\n    fs.appendFile(FILE_PATHS.CLIENT_EMOTIONS_PATH, csvRow, \"utf-8\", (err) => {\n        if (err) console.log(err)\n    });\n}\n\n//Insert the section to csv file\nasync function writeSectionToCSV(data, callback) {\n    try {\n        const gsrValues = data.gsrData.map(item => Object.values(item)[0]);\n\n        const emotion = await predictGSREmotion(gsrValues);\n        const csvRow = `${data.startTime},${data.finishTime},\"[${data.gsrData.join(', ')}]\",${emotion}\\n`;\n\n        fs.appendFile(FILE_PATHS.GSR_TRAINING_FILE_PATH,  csvRow, (err) => {\n            if (err) console.error('Error writing to CSV file:', err)\n        });\n\n        //New data object\n        let newData = {\n            startTime: data.startTime,\n            endTime: data.finishTime,\n            gsr_section: data.gsrData,\n            emotion_state: emotion\n        }\n\n        writeClientGSREmotionsToCSV(newData);   //Write emotiuon in a csv file for user interface display\n        writeSectionTOJSON(newData);            //Save data in a json file\n\n        // Clear the data for the next section\n        data.startTime = null;\n        data.finishTime = null;\n        data.gsrData = [];\n\n        callback();\n    } catch(e) {\n        console.log('Error: ', e)\n    }\n    \n}\n\n//Create the file if it doesnt exist\nfunction createFileIfNotExists(filePath, content) {\n    if (!fs.existsSync(filePath)) {\n      fs.writeFileSync(filePath, content || '', 'utf-8');\n      console.log(`File created: ${filePath}`);\n    }\n}\n\n//Exports\nexport {\n    processGSRoutput,\n    insertGSRData,\n    predictGSREmotion,\n}",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/gsr_procesor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "isDataUpdated",
    "memberof": "modules/gsr_procesor.js",
    "static": true,
    "longname": "modules/gsr_procesor.js~isDataUpdated",
    "access": "public",
    "export": false,
    "importPath": "server/modules/gsr_procesor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "predictSwetingLevel",
    "memberof": "modules/gsr_procesor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/gsr_procesor.js~predictSwetingLevel",
    "access": "public",
    "export": false,
    "importPath": "server/modules/gsr_procesor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "writeSectionTOJSON",
    "memberof": "modules/gsr_procesor.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "modules/gsr_procesor.js~writeSectionTOJSON",
    "access": "public",
    "export": false,
    "importPath": "server/modules/gsr_procesor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "gsrSection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "writeClientGSREmotionsToCSV",
    "memberof": "modules/gsr_procesor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/gsr_procesor.js~writeClientGSREmotionsToCSV",
    "access": "public",
    "export": false,
    "importPath": "server/modules/gsr_procesor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "writeSectionToCSV",
    "memberof": "modules/gsr_procesor.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "modules/gsr_procesor.js~writeSectionToCSV",
    "access": "public",
    "export": false,
    "importPath": "server/modules/gsr_procesor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "createFileIfNotExists",
    "memberof": "modules/gsr_procesor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/gsr_procesor.js~createFileIfNotExists",
    "access": "public",
    "export": false,
    "importPath": "server/modules/gsr_procesor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "content",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "processGSRoutput",
    "memberof": "modules/gsr_procesor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/gsr_procesor.js~processGSRoutput",
    "access": "public",
    "export": true,
    "importPath": "server/modules/gsr_procesor.js",
    "importStyle": "{processGSRoutput}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "nr",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "insertGSRData",
    "memberof": "modules/gsr_procesor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/gsr_procesor.js~insertGSRData",
    "access": "public",
    "export": true,
    "importPath": "server/modules/gsr_procesor.js",
    "importStyle": "{insertGSRData}",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "data2",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "predictGSREmotion",
    "memberof": "modules/gsr_procesor.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "modules/gsr_procesor.js~predictGSREmotion",
    "access": "public",
    "export": true,
    "importPath": "server/modules/gsr_procesor.js",
    "importStyle": "{predictGSREmotion}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "inputGSR",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "modules/rig_controller.js",
    "content": "import { Client } from 'ssh2';\nimport { FILE_PATHS, RIG_CONFIG, APP_CONFIG } from \"./server_settings.js\";\nimport { runImageProcessor, runSessionFileUpdatingInterval } from './utility.js';\n\n\n////////////////////////////////////////////////////////////////////////////\n//RIG Control\n////////////////////////////////////////////////////////////////////////////\n\n//Send the connfiguration, config.ini file to the raspberry pi\nfunction rigControl(startRig) {\n    const ssh = new Client();\n\n    //On connection ready send the configs\n    ssh.on(\"ready\", () => {\n        console.log('Connection ready.')\n\n        ssh.sftp((er, sftp) => {\n            if(er) console.log(\"SSH connection is imposible!\");\n\n            //Copy file to the raspberry pi directory\n            sftp.fastPut(FILE_PATHS.CONFIG_FILE_PATH, APP_CONFIG.PATH, (err) => {\n                if (err) {\n                    console.error('Error transferring the file:', err);\n                    sftp.end(); \n                    ssh.end();\n                    return 0;\n                }\n\n                if(startRig != 'config')  {\n                    runTheRecordingApp(ssh, startRig);\n                    //startEEGRecording()   //EEG recording app\n                }\n            })\n        \n            sftp.on('close', () => ssh.end());       //Close the ssh connection\n        })\n    })\n\n    handleSSHError(ssh);\n    ssh.connect(RIG_CONFIG); //Start connection\n}\n\n//Execute the RIG terminal command\nfunction executeCommand(ssh) {\n    ssh.exec(APP_CONFIG.APP_RUNNING_COMMAND, (err, stream) => {\n        if (err) {\n            console.error(\"Error running the app:\", err);\n            ssh.end();\n            return;\n        }\n\n        \n        runSessionFileUpdatingInterval();     //Update the final file / interval\n        \n        stream.stderr.on('data', (data) => console.error('Python Script Error:', data.toString()));\n    \n        stream.on(\"close\", (code, signal) => { \n            console.log(\"Recording process closed. Exit code:\", code, \"Signal:\", signal);\n            ssh.end();\n        });\n    });\n}\n\n//Run the recording app\nfunction runTheRecordingApp(ssh, startRig) {\n    //Stop all the previews processes\n    ssh.exec(APP_CONFIG.KILL_PYTHON_APPS_COMMAND, (err, stream) => {\n        const sleep = (milliseconds) => {\n            return new Promise(resolve => setTimeout(resolve, milliseconds));\n        };\n\n        if(startRig == 'start') {\n            sleep(1000).then(()=> {\n                executeCommand(ssh);    // Run the rig recording on the raspberry pi\n                runImageProcessor();    //Rund image processor\n            })\n        }\n    }) \n}\n\n//Handle the SSH error\nfunction handleSSHError(ssh) {\n    //On ssh connection error\n    ssh.on(\"error\", (err) => {\n        if(err.code == 'ENOTFOUND') {\n            console.log('SSH connection error. The RIG is Offline.')\n        } else {\n            console.log('SSH connection error: ', err)\n        }\n    })\n}\n\nfunction startEEGRecording() {\n    //EEG\n    let socketUrl = 'wss://localhost:6868';\n\n    let user = {\n        \"license\": process.env.HEADSET_LICENSE,\n        \"clientId\": process.env.HEADSET_CLIENT_ID,\n        \"clientSecret\": process.env.HEADSET_CLIENT_SECRET,\n        \"debit\": 1\n    }\n\n\n    let cortex = new Cortex(user, socketUrl)\n    cortex.run();\n\n}\n\n//Export\nexport { rigControl }",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/rig_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "executeCommand",
    "memberof": "modules/rig_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/rig_controller.js~executeCommand",
    "access": "public",
    "export": false,
    "importPath": "server/modules/rig_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "ssh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "runTheRecordingApp",
    "memberof": "modules/rig_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/rig_controller.js~runTheRecordingApp",
    "access": "public",
    "export": false,
    "importPath": "server/modules/rig_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "ssh",
        "types": [
          "*"
        ]
      },
      {
        "name": "startRig",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "handleSSHError",
    "memberof": "modules/rig_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/rig_controller.js~handleSSHError",
    "access": "public",
    "export": false,
    "importPath": "server/modules/rig_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "ssh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "startEEGRecording",
    "memberof": "modules/rig_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/rig_controller.js~startEEGRecording",
    "access": "public",
    "export": false,
    "importPath": "server/modules/rig_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "rigControl",
    "memberof": "modules/rig_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/rig_controller.js~rigControl",
    "access": "public",
    "export": true,
    "importPath": "server/modules/rig_controller.js",
    "importStyle": "{rigControl}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "startRig",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "modules/routes.js",
    "content": "import express from 'express';\nimport fs from 'fs';\nimport { sendAudioToAWSS3 } from './aws_services.js';\nimport { saveData } from './utility.js';\nimport { resetTimer } from './timer.js';\nimport { SERVER_CONFIG, FILE_PATHS } from './server_settings.js';\nimport { insertGSRData, processGSRoutput } from './gsr_procesor.js';\n\n\n//////////////////////////////////////////////////////////////////////////////////\n//Rig web-service\n//////////////////////////////////////////////////////////////////////////////////\n\nconst serverRoutes = express.Router();\n\n//Flag to update the rig configs\nlet config = { toUpdateConfig: false };\n\n//GSR section object\nlet data = {\n    startTime: null,\n    finishTime: null,\n    gsrData: [],\n    artefacts: 0\n}\n\n//Used for trainig.\nlet trainingFileStart = {\n    fileNumb: 43\n};\n\n\n//Get image and save to a file. \n//It will be saved in a temp direcotry to avoid processing incompleate images\nserverRoutes.post('/image', saveData('images', 'image'), (req, res) => {\n    SERVER_CONFIG.imagesNumber++; //Image counter for user interface\n\n    //Image is saved in the temporary direcotry\n    let imageFile = req.file,           //Image file\n        imageName = imageFile.filename, //Image name\n        tempPath = FILE_PATHS.IMAGE_FOLDER + imageName, //Temp saving directory\n        destinationPath = FILE_PATHS.IMAGE_FOLDER + 'row_images/' + imageName; //Final directory, row_images\n\n    //Check if image is receved\n    if (!imageFile) {\n        console.error('No image file received');\n        return res.sendStatus(400);\n    }\n\n    fs.rename(tempPath, destinationPath, (err) => {}); //Relocate image from the temporary directory to destination direcotry\n\n    res.sendStatus(200);\n});\n\n//Get audio and save to the directory row_audio\nserverRoutes.post('/audio', saveData('audio/row_audio', 'audio'), (req, res) => {\n    SERVER_CONFIG.audioNumber++; //Audio files counter for user interface\n\n    const audioFile = req.file; //File name\n    const filePath = FILE_PATHS.AUDIO_FOLDER + 'row_audio/' + audioFile.filename; //Row data path\n\n    if (!audioFile) {\n        console.error('No audio file received');\n        res.sendStatus(400);\n    }\n\n    //Procces the audio file\n    fs.promises.readFile(filePath)\n        .then(() => {\n            sendAudioToAWSS3(audioFile.filename); //Execute AWS Trasncriber\n            res.sendStatus(200);\n        })\n});\n\n//Receive GSR data\nserverRoutes.post('/gsr', (req, res) => {\n    SERVER_CONFIG.gsrNumber++; //GSR data counter for user interface\n\n    const gsrData = req.body;\n\n    if (!gsrData) {\n        console.error('No GSR data received');\n        return res.sendStatus(400);\n    }\n\n    insertGSRData(data, gsrData['gsr_data'], trainingFileStart); //Insert gsr data/ Used for LM training \n    processGSRoutput(gsrData['gsr_data'], false); //Process GSr data, the permanent processor\n\n    res.sendStatus(200);\n});\n\n//For connection testing and rig config updating\nserverRoutes.get('/connection', (req, res) => {\n    res.json({\n        status: 200,\n        updateConfig: config.toUpdateConfig,\n    })\n    config.toUpdateConfig = false;\n    resetTimer();\n})\n\n//Exports\nexport {\n    serverRoutes,\n    config\n}",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/routes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "data",
    "memberof": "modules/routes.js",
    "static": true,
    "longname": "modules/routes.js~data",
    "access": "public",
    "export": false,
    "importPath": "server/modules/routes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"startTime\": *, \"finishTime\": *, \"gsrData\": *, \"artefacts\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "trainingFileStart",
    "memberof": "modules/routes.js",
    "static": true,
    "longname": "modules/routes.js~trainingFileStart",
    "access": "public",
    "export": false,
    "importPath": "server/modules/routes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"fileNumb\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "serverRoutes",
    "memberof": "modules/routes.js",
    "static": true,
    "longname": "modules/routes.js~serverRoutes",
    "access": "public",
    "export": true,
    "importPath": "server/modules/routes.js",
    "importStyle": "{serverRoutes}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "config",
    "memberof": "modules/routes.js",
    "static": true,
    "longname": "modules/routes.js~config",
    "access": "public",
    "export": true,
    "importPath": "server/modules/routes.js",
    "importStyle": "{config}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"toUpdateConfig\": *}"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "modules/server_settings.js",
    "content": "//Server file paths\n\nconst AUDIO_FOLDER  = './data/audio/',\n    GSR_FOLDER      = './data/gsr/',\n    USER_FOLDER     = './data/user/',\n    IMAGE_FOLDER    = './data/images/',\n    SESSION_FOLDER  = './data/session_files/',\n    CONVERTED_AUDIO = './data/audio/processed_audio/',\n    EEG_FOLDER      = './data/eeg/',\n    FACIAL_EXPRESSIONS_FILE  = EEG_FOLDER  + 'facial_expressions.jsonl',\n    PERFORMANCE_METRICS_FILE = EEG_FOLDER  + 'performance_metrics.jsonl',\n    POWER_OF_SENSORS_FILE    = EEG_FOLDER  + 'power_of_sensors.jsonl',\n    ROW_EEG_FILE             = EEG_FOLDER  + 'row_eeg.jsonl';\n\n\nconst AUDIO_OUTPUT_JSON     = 'audio_text.json',\n    GSR_CLIENT_EMOTIONS_CSV = 'client_emotions.csv',\n    GSR_GRAPH_CSV           = 'gsr_graph.csv',\n    GSR_SECTIONS_JSON       = 'gsr_sections.json',\n    GSR_TRAINING_CSV        = 'gsr_training.csv',\n    IMAGE_TEXT_CSV          = 'image_text.csv',\n    USER_INTRO_WAV          = 'userIntro.wav',\n    USER_DATA_JSON          = 'user.json';\n\n\nconst FILE_PATHS = {\n    CONFIG_FILE_PATH            : '../config.ini',\n    EEG_FOLDER                  : EEG_FOLDER,\n    AUDIO_FOLDER                : AUDIO_FOLDER,\n    CONVERTED_AUDIO             : CONVERTED_AUDIO,\n    GSR_FOLDER                  : GSR_FOLDER,\n    USER_FOLDER                 : USER_FOLDER,\n    IMAGE_FOLDER                : IMAGE_FOLDER,\n    PROCESSED_IMAGES            : IMAGE_FOLDER        + 'processed_images',\n    SESSION_FOLDER              : SESSION_FOLDER,\n    ROW_AUDIO_FOLDER_PATH       : AUDIO_FOLDER        + 'row_audio/',\n    CLIENT_GSR_GRAPH_FILE_PATH  : GSR_FOLDER          + 'client_graph/'         + GSR_GRAPH_CSV,\n    CLIENT_EMOTIONS_PATH        : GSR_FOLDER          + 'client_graph/'         + GSR_CLIENT_EMOTIONS_CSV,\n    GSR_TRAINING_FILE_PATH      : GSR_FOLDER          + 'gsr_training_data/'    + GSR_TRAINING_CSV,\n    IMAGE_TEXT_FILE_PATH        : IMAGE_FOLDER        + 'image_text/'           + IMAGE_TEXT_CSV,\n    AUDIO_TEXT_FILE_PATH        : AUDIO_FOLDER        + AUDIO_OUTPUT_JSON,\n    GSR_SECTIONS_JSON_PATH      : GSR_FOLDER          + GSR_SECTIONS_JSON,\n    USER_INTRO_AUDIO_PATH       : USER_FOLDER         + USER_INTRO_WAV,\n    USER_FILE_PATH              : USER_FOLDER         + USER_DATA_JSON,\n    EEG_FILES_LIST              : [ FACIAL_EXPRESSIONS_FILE, PERFORMANCE_METRICS_FILE, POWER_OF_SENSORS_FILE, ROW_EEG_FILE]\n\n}\n\n//SSH rig connection config\nconst RIG_CONFIG = {\n    host: \"raspberry.local\",\n    port: 22,\n    username: \"rig\",\n    password: \"raspberry\"\n}\n\n\nconst APP_CONFIG = {\n    IMAGE_PROCESSOR_COMMAND     : 'python3 ./processors/image_processor.py',\n    APP_RUNNING_COMMAND         : 'python3 /home/rig/Documents/App/main/app.py',\n    KILL_PYTHON_APPS_COMMAND    : 'pkill -f python',\n    PATH                        : '/home/rig/Documents/App/main/config.ini'\n}\n\n//Server configurations\nlet SERVER_CONFIG = {\n    OUTPUT_LENGTH               : 15,       //Length of the output json file (in minutes)\n    current_session_file        : '',       //Current session file name\n    rigActive                   : false,\n    imagesNumber                : 0,\n    audioNumber                 : 0,\n    gsrNumber                   : 0,\n}\n\nconst EXPERIENCE_CONFIG = {\n    EXPERIENCE_START_KEYWORDS   : \"Start Recording\",     //Experience start words\n    EXPERIENCE_END_KEYWORDS     : \"Stop Recording\",      //Experience end words\n    EXPERIENCE_AUTO_LENGTH      : 100,                   //if no end words. Record 100 words and stop\n}\n\n\n\nexport { \n    FILE_PATHS, \n    RIG_CONFIG,\n    SERVER_CONFIG,\n    APP_CONFIG,\n    EXPERIENCE_CONFIG\n}",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/server_settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "AUDIO_FOLDER",
    "memberof": "modules/server_settings.js",
    "static": true,
    "longname": "modules/server_settings.js~AUDIO_FOLDER",
    "access": "public",
    "export": false,
    "importPath": "server/modules/server_settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "AUDIO_OUTPUT_JSON",
    "memberof": "modules/server_settings.js",
    "static": true,
    "longname": "modules/server_settings.js~AUDIO_OUTPUT_JSON",
    "access": "public",
    "export": false,
    "importPath": "server/modules/server_settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "FILE_PATHS",
    "memberof": "modules/server_settings.js",
    "static": true,
    "longname": "modules/server_settings.js~FILE_PATHS",
    "access": "public",
    "export": true,
    "importPath": "server/modules/server_settings.js",
    "importStyle": "{FILE_PATHS}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"CONFIG_FILE_PATH\": string, \"EEG_FOLDER\": *, \"AUDIO_FOLDER\": *, \"CONVERTED_AUDIO\": *, \"GSR_FOLDER\": *, \"USER_FOLDER\": *, \"IMAGE_FOLDER\": *, \"PROCESSED_IMAGES\": *, \"SESSION_FOLDER\": *, \"ROW_AUDIO_FOLDER_PATH\": *, \"CLIENT_GSR_GRAPH_FILE_PATH\": *, \"CLIENT_EMOTIONS_PATH\": *, \"GSR_TRAINING_FILE_PATH\": *, \"IMAGE_TEXT_FILE_PATH\": *, \"AUDIO_TEXT_FILE_PATH\": *, \"GSR_SECTIONS_JSON_PATH\": *, \"USER_INTRO_AUDIO_PATH\": *, \"USER_FILE_PATH\": *, \"EEG_FILES_LIST\": *}"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "RIG_CONFIG",
    "memberof": "modules/server_settings.js",
    "static": true,
    "longname": "modules/server_settings.js~RIG_CONFIG",
    "access": "public",
    "export": true,
    "importPath": "server/modules/server_settings.js",
    "importStyle": "{RIG_CONFIG}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "{\"host\": string, \"port\": number, \"username\": string, \"password\": string}"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "SERVER_CONFIG",
    "memberof": "modules/server_settings.js",
    "static": true,
    "longname": "modules/server_settings.js~SERVER_CONFIG",
    "access": "public",
    "export": true,
    "importPath": "server/modules/server_settings.js",
    "importStyle": "{SERVER_CONFIG}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "{\"OUTPUT_LENGTH\": number, \"current_session_file\": *, \"rigActive\": *, \"imagesNumber\": *, \"audioNumber\": *, \"gsrNumber\": *}"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "APP_CONFIG",
    "memberof": "modules/server_settings.js",
    "static": true,
    "longname": "modules/server_settings.js~APP_CONFIG",
    "access": "public",
    "export": true,
    "importPath": "server/modules/server_settings.js",
    "importStyle": "{APP_CONFIG}",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "{\"IMAGE_PROCESSOR_COMMAND\": string, \"APP_RUNNING_COMMAND\": string, \"KILL_PYTHON_APPS_COMMAND\": string, \"PATH\": string}"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "EXPERIENCE_CONFIG",
    "memberof": "modules/server_settings.js",
    "static": true,
    "longname": "modules/server_settings.js~EXPERIENCE_CONFIG",
    "access": "public",
    "export": true,
    "importPath": "server/modules/server_settings.js",
    "importStyle": "{EXPERIENCE_CONFIG}",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "{\"EXPERIENCE_START_KEYWORDS\": string, \"EXPERIENCE_END_KEYWORDS\": string, \"EXPERIENCE_AUTO_LENGTH\": number}"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "modules/timer.js",
    "content": "import { SERVER_CONFIG } from './server_settings.js';\n\nlet timer;\n\n//##############################################################\n//Rig status check timer\n//##############################################################\n\n//Switch rig status to offline\nfunction timerHandler() {\n    SERVER_CONFIG.rigActive = false;\n    console.log('Rig is not active!');\n}\n\n//Reset the timer\nfunction resetTimer() {\n    SERVER_CONFIG.rigActive = true;\n    clearTimeout(timer);\n    timer = setTimeout(timerHandler, 5000);\n}\n\ntimer = setTimeout(timerHandler, 5000); //Initiate the timer\n\n//Exports\nexport { resetTimer };\n",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "timerHandler",
    "memberof": "modules/timer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/timer.js~timerHandler",
    "access": "public",
    "export": false,
    "importPath": "server/modules/timer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "resetTimer",
    "memberof": "modules/timer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/timer.js~resetTimer",
    "access": "public",
    "export": true,
    "importPath": "server/modules/timer.js",
    "importStyle": "{resetTimer}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "modules/utility.js",
    "content": "import multer, { diskStorage } from 'multer';\nimport fs from 'fs';\nimport { exec } from 'child_process';\nimport Papa from 'papaparse';\nimport crypto from 'crypto';\nimport { FILE_PATHS, SERVER_CONFIG, APP_CONFIG } from \"./server_settings.js\";\nimport { emptyAllFiles } from \"./file_cleaners.js\";\n\n/**\n * Middleware to handle file uploads and save them to a specified folder.\n *\n * @function\n * @memberof module:utility\n * @param {string} folder - The folder where the data will be stored.\n * @param {string} fileType - The type of file being uploaded.\n * @returns {Function} Middleware function for handling file uploads.\n * @throws {Error} Throws an error if there is an issue with file storage.\n *\n * @example\n * const uploadMiddleware = saveData('uploads', 'image');\n * app.post('/upload', uploadMiddleware, (req, res) => {\n *   // Handle file upload\n * });\n */\nfunction saveData(folder, fileType) {\n    const storage = diskStorage({\n        destination: (r, f, callback) => {\n            callback(null, `data/${folder}/`);\n        },\n\n        filename: (r, file, callback) => {\n            callback(null, file.originalname);\n        }\n    });\n\n    const upload = multer({\n        storage: storage\n    });\n\n    return upload.single(fileType);\n}\n\n/**\n * Run the image processor Python script.\n *\n * @function\n * @memberof module:utility\n * @name runImageProcessor\n * @throws {Error} If there is an error during execution.\n * @returns {void}\n * @example\n * runImageProcessor();\n */\nfunction runImageProcessor() {\n    exec(APP_CONFIG.IMAGE_PROCESSOR_COMMAND, (error, stdout, stderr) => {\n        if (error) {\n            console.error(`Error: ${error.message}`);\n            throw error; //Throw an error to indicate failure\n        }\n        if (stderr) {\n            console.error(`Stderr: ${stderr}`);\n            return;\n        }\n        console.log(`Output: ${stdout}`);\n    });\n}\n\n\n////////////////////////////////////////////////////////////////////////////\n//File handlers\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * Read the content of a JSON file and parse it into a JavaScript object.\n *\n * @function\n * @memberof module:utility\n * @name readJSONFile\n * @param {string} filePath - The path to the JSON file.\n * @param {Function} [callback=() => {}] - A callback function to be executed after reading the file.\n * @throws {Error} If there is an error reading or parsing the JSON file.\n * @returns {void}\n * @example\n * readJSONFile('/path/to/file.json', (dataObject) => {\n *   console.log('Read data:', dataObject);\n * });\n */\nfunction readJSONFile(filePath, callback = () => {}) {\n    try {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                console.error('Error reading JSON file:', err);\n                callback(err, null);\n                return;\n            }\n\n            const dataObject = JSON.parse(data || '[]');\n            callback(dataObject);\n        });\n    } catch (err) {\n        console.log('Error reading file: ', err)\n    }\n}\n\n/**\n * Write data to a JSON file, formatting the JSON content for readability.\n *\n * @function\n * @memberof module:utility\n * @name writeJSONFile\n * @param {string} filePath - The path to the JSON file.\n * @param {Object} data - The data to be written to the file.\n * @throws {Error} If there is an error writing the JSON file.\n * @returns {void}\n * @example\n * const jsonData = { key: 'value' };\n * writeJSONFile('/path/to/file.json', jsonData);\n */\nfunction writeJSONFile(filePath, data) {\n    try {\n        fs.writeFileSync(filePath, JSON.stringify(data, null, 4), 'utf8');\n    } catch (error) {\n        console.error(`Error writing JSON file (${filePath}):`, error);\n    }\n}\n\n\n\n////////////////////////////////////////////////////////////////////////////\n//FORMAT THE DATA, MERGE AND SAVE TO A FILE\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * Get and convert image data from the data file.\n *\n * @function\n * @memberof module:utility\n * @name convertImageData\n * @returns {Array<Object>} An array of objects containing converted image data.\n * @example\n * const convertedData = convertImageData();\n * console.log(convertedData);\n */\nfunction convertImageData() {\n    let imageData = getImages(),\n        result = [];\n\n    //Format images data\n    imageData.forEach(row => {\n        let imageName = row.image,\n            timestamp = extractTimestamp(imageName);\n\n        let data = {\n            [timestamp]: imageName,\n            text: row.text\n        }\n\n        let exist = result.find(img => img.text === data.text);\n        if (timestamp != null && !exist) result.push(data);\n    })\n\n    return result;\n}\n/**\n * Convert audio data and extract audio text, detected experience, and sentiments.\n *\n * @function\n * @memberof module:utility\n * @name convertAudioData\n * @param {Array<Object>} audioData - Array of audio data objects.\n * @returns {Object} Object containing audio data, experience data, and sentiments.\n * @example\n * const audioData = [...]; // Your audio data array\n * const { audioObject, experienceObject, sentiments } = convertAudioData(audioData);\n * console.log(audioObject, experienceObject, sentiments);\n */\nfunction convertAudioData(audioData) {\n    let audioObject = [],\n        experienceObject = [],\n        sentiments = [];\n\n    audioData.forEach(audioSection => {\n        let data = {\n            [audioSection.timestamp]: audioSection.audio_file,\n            text: audioSection.text,\n            sentiment: audioSection.text_emotion\n        }\n\n        let des = {\n            [audioSection.timestamp]: audioSection.audio_file,\n            text: audioSection.experienceDetected,\n        }\n\n        sentiments.push({\n            [audioSection.timestamp]: audioSection.audio_file,\n            sentiment: audioSection.text_emotion\n        })\n\n        experienceObject.push(des);\n        audioObject.push(data);\n\n    });\n\n    experienceObject = experienceObject.filter(el => el.text != null);\n\n    return {\n        audioObject,\n        experienceObject,\n        sentiments\n    };\n}\n\n\n/**\n * Convert GSR (Galvanic Skin Response) data and update the sentiments array.\n *\n * @function\n * @memberof module:utility\n * @name convertGSRData\n * @param {Array<Object>} gsrData - Array of GSR data objects.\n * @param {Array<Object>} sentiments - Array of sentiment data to be updated.\n * @returns {Array<Object>} Array of formatted GSR data objects.\n * @example\n * const gsrData = [...]; // Your GSR data array\n * const sentiments = [...]; // Your sentiments array\n * const gsrObject = convertGSRData(gsrData, sentiments);\n * console.log(gsrObject);\n */\nfunction convertGSRData(gsrData, sentiments) {\n    let gsrObject = [];\n\n    //Format the GSR datax\n    gsrData.forEach(gsrSection => {\n        let data = {\n            start: gsrSection.startTime,\n            end: gsrSection.endTime,\n            section: gsrSection.gsr_section,\n            sentiment: gsrSection.emotion_state\n        }\n\n        sentiments.push({\n            [gsrSection.startTime]: gsrSection.endTime,\n            sentiment: gsrSection.emotion_state\n        })\n\n        gsrObject.push(data);\n    })\n\n    return gsrObject;\n}\n\n\n/**\n * Create the final output file by merging and formatting various data sources.\n *\n * @function\n * @memberof module:utility\n * @name insertDataToFinalFile\n * @example\n * insertDataToFinalFile();\n */\nfunction insertDataToFinalFile() {\n    checkSessionFilePeriod(() => {\n        //Read Audio text data\n        readJSONFile(FILE_PATHS.AUDIO_TEXT_FILE_PATH, (audioData) => {\n            let imageObject = convertImageData(); //replace the code bellow\n\n            let {\n                audioObject,\n                experienceObject,\n                sentiments\n            } = convertAudioData(audioData);\n            let eegObject = getAllEEGFilesContent();\n\n            //Read GSR data\n            readJSONFile(FILE_PATHS.GSR_SECTIONS_JSON_PATH, (gsrData) => {\n                let gsrObject = convertGSRData(gsrData, sentiments);\n\n                //Read user data file\n                readJSONFile(FILE_PATHS.USER_FILE_PATH, (user) => {\n                    //Create the final data format\n                    const merged = {\n                        head: {\n                            [user.sessionStart]: user.sessionFile,\n                            user: user.currentUser,\n                            version: user.version,\n                            duration: user.duration,\n                            blockchain: user.blockchain\n                        },\n                        data: {\n                            gsr: gsrObject,\n                            eeg: eegObject,\n                            audio: audioObject,\n                            des: experienceObject,\n                            sentiment: sentiments,\n                            image: imageObject\n                        }\n                    }\n\n                    writeJSONFile(SERVER_CONFIG.current_session_file, merged); // Write the merged data to a new file\n                    console.log(`Merged data written to ${SERVER_CONFIG.current_session_file}`);\n                })\n            })\n        })\n    })\n}\n\n\n/**\n * Extract the timestamp from a string.\n *\n * @function\n * @memberof module:utility\n * @name extractTimestamp\n * @param {string} fromString - The input string containing the timestamp.\n * @returns {number|null} Extracted timestamp as a number or null if not found.\n * @example\n * const timestamp = extractTimestamp(\"Day 1: 12345\");\n * console.log(timestamp); // Output: 12345\n */\nfunction extractTimestamp(fromString) {\n    let match = fromString.match(/(\\d+)/);\n\n    return match ? parseInt(match[0]) : null;\n}\n\n\n/**\n * Runs the final file content update at regular intervals.\n *\n * @function\n * @memberof module:utility\n */\nfunction runSessionFileUpdatingInterval() {\n    setInterval(() => insertDataToFinalFile(), 1 * 60 * 100);\n}\n\n\n/**\n * Update the session file when the time is more than defined time minutes.\n *\n * @function\n * @memberof module:utility\n * @param {Function} callback - Callback function to be executed after the update.\n */\nfunction checkSessionFilePeriod(callback) {\n    try {\n        //Read user.json file\n        readJSONFile(FILE_PATHS.USER_FILE_PATH, (userObject) => {\n            let { sessionStart, sessionFile } = userObject; //Extract sessionStart and sessionFile\n\n            //Calculate the difference between current time and sessionStart in milliseconds\n            const currentTime = new Date().getTime();\n            const timeDifference = currentTime - sessionStart;\n\n            let shouldCreateNewSession = () => {\n                return (sessionStart == '' || sessionFile == '' || timeDifference > SERVER_CONFIG.OUTPUT_LENGTH * 60 * 1000)\n            }\n\n            //Check if the difference is more than minutes (minutes * 60 * 1000 milliseconds)\n            if (shouldCreateNewSession) {\n                createNewSession(currentTime, userObject, callback);\n            } else {\n                SERVER_CONFIG.current_session_file = FILE_PATHS.SESSION_FOLDER + sessionFile; //Difference is less than setted time\n                callback();\n\n                console.log(\"Session Updated!\")\n            }\n        });\n    } catch (error) {\n        console.error('Error updating the session file:', error);\n    }\n}\n\n\n/**\n * Creates a new session.\n *\n * @function\n * @memberof module:utility\n * @param {number} currentTime - Current time in milliseconds.\n * @param {object} userObject - User object containing session details.\n * @param {Function} callback - Callback function to be executed after the creation.\n */\nfunction createNewSession(currentTime, userObject, callback) {\n    getTheHash((hash) => {\n        //Create a new JSON file with the name \"session\" + current timestamp\n        const newFileName = `session_${currentTime}.json`;\n        const newSessionFilename = FILE_PATHS.SESSION_FOLDER + newFileName;\n        writeJSONFile(newSessionFilename, {});\n\n        //Assign the created filename to current_session file\n        SERVER_CONFIG.current_session_file = newSessionFilename;\n        console.log(`New session file created: ${SERVER_CONFIG.current_session_file}`);\n\n        sessionStart = currentTime;\n        sessionFile = newFileName;\n\n        let blockchain = {\n            authority: \"Evolwe\",\n            hash: hash\n        };\n\n        let concatinatedOBJ = Object.assign({}, userObject, {\n            sessionStart,\n            sessionFile,\n            blockchain\n        });\n\n        writeJSONFile(FILE_PATHS.USER_FILE_PATH, concatinatedOBJ);\n        emptyAllFiles();\n        callback();\n    });\n}\n\n\n/**\n * Get image data from a CSV file.\n *\n * @function\n * @memberof module:utility\n * @returns {Array} Parsed data containing image information.\n * @throws {Error} Throws an error if there's an issue reading or parsing the CSV file.\n */\nfunction getImages() {\n    const imageCsv = fs.readFileSync(FILE_PATHS.IMAGE_TEXT_FILE_PATH, 'utf8'); //Read the image text csv file\n    const parsedData = Papa.parse(imageCsv, {\n        header: true\n    }); //Parse CSV data    \n\n    return parsedData.data;\n}\n\n\n/**\n * Hash the given data using SHA-256 algorithm.\n *\n * @function\n * @memberof module:utility\n * @param {Object} data - The data to be hashed.\n * @returns {string} The SHA-256 hash of the data.\n */\nfunction hashTheData(data) {\n    // Convert data to JSON string\n    let jsonData = JSON.stringify(data);\n\n    // Create a SHA-256 hash of the JSON string\n    const hash = crypto.createHash('sha256').update(jsonData).digest('hex');\n\n    return hash;\n}\n\n\n/**\n * Get the hash from the cloud.\n *\n * @function\n * @memberof module:utility\n * @param {Function} callback - The callback function to handle the retrieved hash.\n * @throws Will throw an error if there is an issue reading JSON files or making the API request.\n */\nfunction getTheHash(callback) {\n    // Read user.json file\n    readJSONFile(FILE_PATHS.USER_FILE_PATH, (userObject) => {\n        let { sessionFile, currentUser } = userObject;\n\n        // Read session file\n        readJSONFile(`./data/session_files/${sessionFile}`, (session) => {\n            // Hash the session data\n            let hash = hashTheData(session);\n\n            // Make API request to get the rehashed value\n            fetch(\"https://olkjccryjj.execute-api.eu-west-2.amazonaws.com/prod/rehash\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    hash: hash,\n                    user: currentUser\n                })\n            }).then(res => res.json()).then(data => {\n                // Invoke the callback with the rehashed value\n                callback(data.rehashedValue);\n            })\n        })\n    })\n}\n\n\n/**\n * Read the JSONL file and return the content and session IDs.\n *\n * @function\n * @memberof module:utility\n * @param {string} filePath - The path to the JSONL file.\n * @returns {Object} An object containing the converted data and session IDs.\n * @throws Will throw an error if there is an issue reading the file or parsing JSON.\n */\nfunction getJSONLFileContent(filePath) {\n    let sids = [],\n        previeusSession = undefined;\n\n    try {\n        //Convert Data\n        const fileContent = fs.readFileSync(filePath, 'utf-8').split('\\n').filter(line => line.trim() !== '')\n        const convertedData = fileContent.map(item => JSON.parse(item));\n\n        convertedData.forEach(element => {\n            if (previeusSession == undefined) {\n                previeusSession = element.sid;\n                sids.push(previeusSession);\n            } else if (element.sid != previeusSession) {\n                previeusSession = element.sid;\n                sids.push(previeusSession);\n            }\n\n            delete element.sid;\n        });\n\n        return {\n            convertedData,\n            sids\n        };\n\n    } catch (error) {\n        console.log('Error reading JSONL file: ', error);\n        return {\n            convertedData: [],\n            sids: []\n        };\n    }\n}\n\n\n/**\n * Get content from all EEG files and organize it by type.\n *\n * @function\n * @memberof module:utility\n * @returns {Object} An object containing EEG data organized by type and unique session IDs.\n * @throws Will throw an error if there is an issue reading the files or parsing JSON.\n */\nfunction getAllEEGFilesContent() {\n    let sessionIDs = [];\n\n    let finalEEGdata = {\n        sessionIds: [],\n        expression: [],\n        performance: [],\n        sensors: [],\n        row: []\n    }\n\n    FILE_PATHS.EEG_FILES_LIST.forEach(file => {\n        let type = undefined;\n\n        // Determine the type of EEG file based on its name\n        if (file.includes('facial')) {\n            type = \"expression\";\n        } else if (file.includes('performance')) {\n            type = \"performance\";\n        } else if (file.includes('sensors')) {\n            type = \"sensors\";\n        } else if (file.includes('row')) {\n            type = \"row\";\n        }\n\n        let { convertedData, sids } = getJSONLFileContent(file);\n\n        // Collect session IDs and organize data by type\n        sessionIDs.push(...sids);\n        finalEEGdata[type] = convertedData;\n    });\n\n    // Remove duplicate session IDs using a Set\n    let unicIds = new Set(sessionIDs);\n    finalEEGdata.sessionIds = [...unicIds];\n\n    return finalEEGdata;\n}\n\n\n//Exports\nexport {\n    getAllEEGFilesContent,\n    getJSONLFileContent,\n    runImageProcessor,\n    saveData,\n    runSessionFileUpdatingInterval,\n    insertDataToFinalFile,\n    readJSONFile,\n    extractTimestamp,\n    getTheHash,\n    writeJSONFile\n}",
    "static": true,
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/modules/utility.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "convertImageData",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~convertImageData",
    "access": "public",
    "export": false,
    "importPath": "server/modules/utility.js",
    "importStyle": null,
    "description": "Get and convert image data from the data file.",
    "examples": [
      "const convertedData = convertImageData();\nconsole.log(convertedData);"
    ],
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} An array of objects containing converted image data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "An array of objects containing converted image data."
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "convertAudioData",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~convertAudioData",
    "access": "public",
    "export": false,
    "importPath": "server/modules/utility.js",
    "importStyle": null,
    "description": "Convert audio data and extract audio text, detected experience, and sentiments.",
    "examples": [
      "const audioData = [...]; // Your audio data array\nconst { audioObject, experienceObject, sentiments } = convertAudioData(audioData);\nconsole.log(audioObject, experienceObject, sentiments);"
    ],
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} Object containing audio data, experience data, and sentiments."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "audioData",
        "description": "Array of audio data objects."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Object containing audio data, experience data, and sentiments."
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "convertGSRData",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~convertGSRData",
    "access": "public",
    "export": false,
    "importPath": "server/modules/utility.js",
    "importStyle": null,
    "description": "Convert GSR (Galvanic Skin Response) data and update the sentiments array.",
    "examples": [
      "const gsrData = [...]; // Your GSR data array\nconst sentiments = [...]; // Your sentiments array\nconst gsrObject = convertGSRData(gsrData, sentiments);\nconsole.log(gsrObject);"
    ],
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} Array of formatted GSR data objects."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "gsrData",
        "description": "Array of GSR data objects."
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "sentiments",
        "description": "Array of sentiment data to be updated."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "Array of formatted GSR data objects."
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "checkSessionFilePeriod",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~checkSessionFilePeriod",
    "access": "public",
    "export": false,
    "importPath": "server/modules/utility.js",
    "importStyle": null,
    "description": "Update the session file when the time is more than defined time minutes.",
    "lineNumber": 346,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to be executed after the update."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "createNewSession",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~createNewSession",
    "access": "public",
    "export": false,
    "importPath": "server/modules/utility.js",
    "importStyle": null,
    "description": "Creates a new session.",
    "lineNumber": 385,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "currentTime",
        "description": "Current time in milliseconds."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userObject",
        "description": "User object containing session details."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to be executed after the creation."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "getImages",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~getImages",
    "access": "public",
    "export": false,
    "importPath": "server/modules/utility.js",
    "importStyle": null,
    "description": "Get image data from a CSV file.",
    "lineNumber": 425,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} Parsed data containing image information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Parsed data containing image information."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if there's an issue reading or parsing the CSV file."
      }
    ],
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "hashTheData",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~hashTheData",
    "access": "public",
    "export": false,
    "importPath": "server/modules/utility.js",
    "importStyle": null,
    "description": "Hash the given data using SHA-256 algorithm.",
    "lineNumber": 443,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} The SHA-256 hash of the data."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to be hashed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The SHA-256 hash of the data."
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "getAllEEGFilesContent",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~getAllEEGFilesContent",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{getAllEEGFilesContent}",
    "description": "Get content from all EEG files and organize it by type.",
    "lineNumber": 544,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} An object containing EEG data organized by type and unique session IDs."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object containing EEG data organized by type and unique session IDs."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if there is an issue reading the files or parsing JSON."
      }
    ],
    "params": []
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "getJSONLFileContent",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~getJSONLFileContent",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{getJSONLFileContent}",
    "description": "Read the JSONL file and return the content and session IDs.",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} An object containing the converted data and session IDs."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "The path to the JSONL file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object containing the converted data and session IDs."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if there is an issue reading the file or parsing JSON."
      }
    ]
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "runImageProcessor",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~runImageProcessor",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{runImageProcessor}",
    "description": "Run the image processor Python script.",
    "examples": [
      "runImageProcessor();"
    ],
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If there is an error during execution."
      }
    ],
    "params": []
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "saveData",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~saveData",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{saveData}",
    "description": "Middleware to handle file uploads and save them to a specified folder.",
    "examples": [
      "const uploadMiddleware = saveData('uploads', 'image');\napp.post('/upload', uploadMiddleware, (req, res) => {\n  // Handle file upload\n});"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Function} Middleware function for handling file uploads."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "folder",
        "description": "The folder where the data will be stored."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileType",
        "description": "The type of file being uploaded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Middleware function for handling file uploads."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if there is an issue with file storage."
      }
    ]
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "runSessionFileUpdatingInterval",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~runSessionFileUpdatingInterval",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{runSessionFileUpdatingInterval}",
    "description": "Runs the final file content update at regular intervals.",
    "lineNumber": 334,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "insertDataToFinalFile",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~insertDataToFinalFile",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{insertDataToFinalFile}",
    "description": "Create the final output file by merging and formatting various data sources.",
    "examples": [
      "insertDataToFinalFile();"
    ],
    "lineNumber": 262,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "readJSONFile",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~readJSONFile",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{readJSONFile}",
    "description": "Read the content of a JSON file and parse it into a JavaScript object.",
    "examples": [
      "readJSONFile('/path/to/file.json', (dataObject) => {\n  console.log('Read data:', dataObject);\n});"
    ],
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "The path to the JSON file."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "callback",
        "description": "A callback function to be executed after reading the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If there is an error reading or parsing the JSON file."
      }
    ]
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "extractTimestamp",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~extractTimestamp",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{extractTimestamp}",
    "description": "Extract the timestamp from a string.",
    "examples": [
      "const timestamp = extractTimestamp(\"Day 1: 12345\");\nconsole.log(timestamp); // Output: 12345"
    ],
    "lineNumber": 321,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{number|null} Extracted timestamp as a number or null if not found."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fromString",
        "description": "The input string containing the timestamp."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "null"
      ],
      "spread": false,
      "description": "Extracted timestamp as a number or null if not found."
    }
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "getTheHash",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~getTheHash",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{getTheHash}",
    "description": "Get the hash from the cloud.",
    "lineNumber": 462,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback function to handle the retrieved hash."
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if there is an issue reading JSON files or making the API request."
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "writeJSONFile",
    "memberof": "modules/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "modules/utility.js~writeJSONFile",
    "access": "public",
    "export": true,
    "importPath": "server/modules/utility.js",
    "importStyle": "{writeJSONFile}",
    "description": "Write data to a JSON file, formatting the JSON content for readability.",
    "examples": [
      "const jsonData = { key: 'value' };\nwriteJSONFile('/path/to/file.json', jsonData);"
    ],
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "The path to the JSON file."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to be written to the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If there is an error writing the JSON file."
      }
    ]
  },
  {
    "kind": "index",
    "content": "<h1>Project Name - Data Recording Rig</h1>\n\nWelcome to the server component of the Data Recording Rig! This server plays a crucial role in managing and processing data collected from various sources, providing a robust backend for the entire system.\n\n\n<h2>Overview</h2>\n\nThe server is designed to handle tasks such as processing audio and image data, managing EEG files, analyzing sentiment, and orchestrating the generation of a final output file. It acts as the backbone, ensuring seamless communication between different modules and facilitating data transformation and consolidation.\n\n\n<h2>Features</h2>\n\n<h5>Data Processing:</h5> Efficiently processes diverse data types, including audio, image, and EEG data.\n<h5>Real-time Updates:</h5> Regularly updates the final output file with the latest information from various sources.\n<h5>Hashing and Cloud Integration:</h5> Implements secure data hashing and interacts with cloud services to ensure data integrity.\n<h5>Session Management:</h5> Monitors and manages user sessions, creating new sessions when needed.\n<h5>File Handling:</h5> Manages various data files, ensuring proper organization and storage.\n",
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Data collection and processing server\",\n  \"main\": \"index.html\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"node server.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/ancara22/pi-server.git\"\n  },\n  \"author\": \"Dionis\",\n  \"license\": \"ISC\",\n  \"type\": \"module\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ancara22/pi-server/issues\"\n  },\n  \"homepage\": \"https://github.com/ancara22/pi-server#readme\",\n  \"dependencies\": {\n    \"aws-sdk\": \"^2.1489.0\",\n    \"body-parser\": \"^1.20.2\",\n    \"child_process\": \"^1.0.2\",\n    \"cors\": \"^2.8.5\",\n    \"csv-parser\": \"^3.0.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"express\": \"^4.18.2\",\n    \"fs\": \"^0.0.1-security\",\n    \"ini\": \"^4.1.1\",\n    \"multer\": \"^1.4.5-lts.1\",\n    \"papaparse\": \"^5.4.1\",\n    \"path\": \"^0.12.7\",\n    \"plotly\": \"^1.0.6\",\n    \"ssh2\": \"^1.14.0\",\n    \"wav\": \"^1.0.2\",\n    \"ws\": \"^8.16.0\"\n  }\n}\n",
    "longname": "/Users/dionisbarcari/Documents/Courseworks/Final-Coursework/piServer/server/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]